{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\n\nconst code_1 = require(\"./code\");\n\nconst scope_1 = require(\"./scope\");\n\nvar code_2 = require(\"./code\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function () {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function () {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function () {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return code_2.Name;\n  }\n});\n\nvar scope_2 = require(\"./scope\");\n\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\n\nclass Node {\n  optimizeNodes() {\n    return this;\n  }\n\n  optimizeNames(_names, _constants) {\n    return this;\n  }\n\n}\n\nclass Def extends Node {\n  constructor(varKind, name, rhs) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.rhs = rhs;\n  }\n\n  render({\n    es5,\n    _n\n  }) {\n    const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n    return `${varKind} ${this.name}${rhs};` + _n;\n  }\n\n  optimizeNames(names, constants) {\n    if (!names[this.name.str]) return;\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n\n  get names() {\n    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n  }\n\n}\n\nclass Assign extends Node {\n  constructor(lhs, rhs, sideEffects) {\n    super();\n    this.lhs = lhs;\n    this.rhs = rhs;\n    this.sideEffects = sideEffects;\n  }\n\n  render({\n    _n\n  }) {\n    return `${this.lhs} = ${this.rhs};` + _n;\n  }\n\n  optimizeNames(names, constants) {\n    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n    this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n\n  get names() {\n    const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names\n    };\n    return addExprNames(names, this.rhs);\n  }\n\n}\n\nclass AssignOp extends Assign {\n  constructor(lhs, op, rhs, sideEffects) {\n    super(lhs, rhs, sideEffects);\n    this.op = op;\n  }\n\n  render({\n    _n\n  }) {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n  }\n\n}\n\nclass Label extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n\n  render({\n    _n\n  }) {\n    return `${this.label}:` + _n;\n  }\n\n}\n\nclass Break extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n\n  render({\n    _n\n  }) {\n    const label = this.label ? ` ${this.label}` : \"\";\n    return `break${label};` + _n;\n  }\n\n}\n\nclass Throw extends Node {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n\n  render({\n    _n\n  }) {\n    return `throw ${this.error};` + _n;\n  }\n\n  get names() {\n    return this.error.names;\n  }\n\n}\n\nclass AnyCode extends Node {\n  constructor(code) {\n    super();\n    this.code = code;\n  }\n\n  render({\n    _n\n  }) {\n    return `${this.code};` + _n;\n  }\n\n  optimizeNodes() {\n    return `${this.code}` ? this : undefined;\n  }\n\n  optimizeNames(names, constants) {\n    this.code = optimizeExpr(this.code, names, constants);\n    return this;\n  }\n\n  get names() {\n    return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n  }\n\n}\n\nclass ParentNode extends Node {\n  constructor(nodes = []) {\n    super();\n    this.nodes = nodes;\n  }\n\n  render(opts) {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n  }\n\n  optimizeNodes() {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n\n    while (i--) {\n      const n = nodes[i].optimizeNodes();\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);\n    }\n\n    return nodes.length > 0 ? this : undefined;\n  }\n\n  optimizeNames(names, constants) {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i];\n      if (n.optimizeNames(names, constants)) continue;\n      subtractNames(names, n.names);\n      nodes.splice(i, 1);\n    }\n\n    return nodes.length > 0 ? this : undefined;\n  }\n\n  get names() {\n    return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n  }\n\n}\n\nclass BlockNode extends ParentNode {\n  render(opts) {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n  }\n\n}\n\nclass Root extends ParentNode {}\n\nclass Else extends BlockNode {}\n\nElse.kind = \"else\";\n\nclass If extends BlockNode {\n  constructor(condition, nodes) {\n    super(nodes);\n    this.condition = condition;\n  }\n\n  render(opts) {\n    let code = `if(${this.condition})` + super.render(opts);\n    if (this.else) code += \"else \" + this.else.render(opts);\n    return code;\n  }\n\n  optimizeNodes() {\n    super.optimizeNodes();\n    const cond = this.condition;\n    if (cond === true) return this.nodes; // else is ignored here\n\n    let e = this.else;\n\n    if (e) {\n      const ns = e.optimizeNodes();\n      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n    }\n\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes;\n      if (this.nodes.length) return this;\n      return new If(not(cond), e instanceof If ? [e] : e.nodes);\n    }\n\n    if (cond === false || !this.nodes.length) return undefined;\n    return this;\n  }\n\n  optimizeNames(names, constants) {\n    var _a;\n\n    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    if (!(super.optimizeNames(names, constants) || this.else)) return;\n    this.condition = optimizeExpr(this.condition, names, constants);\n    return this;\n  }\n\n  get names() {\n    const names = super.names;\n    addExprNames(names, this.condition);\n    if (this.else) addNames(names, this.else.names);\n    return names;\n  }\n\n}\n\nIf.kind = \"if\";\n\nclass For extends BlockNode {}\n\nFor.kind = \"for\";\n\nclass ForLoop extends For {\n  constructor(iteration) {\n    super();\n    this.iteration = iteration;\n  }\n\n  render(opts) {\n    return `for(${this.iteration})` + super.render(opts);\n  }\n\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iteration = optimizeExpr(this.iteration, names, constants);\n    return this;\n  }\n\n  get names() {\n    return addNames(super.names, this.iteration.names);\n  }\n\n}\n\nclass ForRange extends For {\n  constructor(varKind, name, from, to) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.from = from;\n    this.to = to;\n  }\n\n  render(opts) {\n    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n    const {\n      name,\n      from,\n      to\n    } = this;\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n  }\n\n  get names() {\n    const names = addExprNames(super.names, this.from);\n    return addExprNames(names, this.to);\n  }\n\n}\n\nclass ForIter extends For {\n  constructor(loop, varKind, name, iterable) {\n    super();\n    this.loop = loop;\n    this.varKind = varKind;\n    this.name = name;\n    this.iterable = iterable;\n  }\n\n  render(opts) {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n  }\n\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iterable = optimizeExpr(this.iterable, names, constants);\n    return this;\n  }\n\n  get names() {\n    return addNames(super.names, this.iterable.names);\n  }\n\n}\n\nclass Func extends BlockNode {\n  constructor(name, args, async) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.async = async;\n  }\n\n  render(opts) {\n    const _async = this.async ? \"async \" : \"\";\n\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n  }\n\n}\n\nFunc.kind = \"func\";\n\nclass Return extends ParentNode {\n  render(opts) {\n    return \"return \" + super.render(opts);\n  }\n\n}\n\nReturn.kind = \"return\";\n\nclass Try extends BlockNode {\n  render(opts) {\n    let code = \"try\" + super.render(opts);\n    if (this.catch) code += this.catch.render(opts);\n    if (this.finally) code += this.finally.render(opts);\n    return code;\n  }\n\n  optimizeNodes() {\n    var _a, _b;\n\n    super.optimizeNodes();\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n    return this;\n  }\n\n  optimizeNames(names, constants) {\n    var _a, _b;\n\n    super.optimizeNames(names, constants);\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n    return this;\n  }\n\n  get names() {\n    const names = super.names;\n    if (this.catch) addNames(names, this.catch.names);\n    if (this.finally) addNames(names, this.finally.names);\n    return names;\n  }\n\n}\n\nclass Catch extends BlockNode {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n\n  render(opts) {\n    return `catch(${this.error})` + super.render(opts);\n  }\n\n}\n\nCatch.kind = \"catch\";\n\nclass Finally extends BlockNode {\n  render(opts) {\n    return \"finally\" + super.render(opts);\n  }\n\n}\n\nFinally.kind = \"finally\";\n\nclass CodeGen {\n  constructor(extScope, opts = {}) {\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = { ...opts,\n      _n: opts.lines ? \"\\n\" : \"\"\n    };\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n\n  toString() {\n    return this._root.render(this.opts);\n  } // returns unique name in the internal scope\n\n\n  name(prefix) {\n    return this._scope.name(prefix);\n  } // reserves unique name in the external scope\n\n\n  scopeName(prefix) {\n    return this._extScope.name(prefix);\n  } // reserves unique name in the external scope and assigns value to it\n\n\n  scopeValue(prefixOrName, value) {\n    const name = this._extScope.value(prefixOrName, value);\n\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n    vs.add(name);\n    return name;\n  }\n\n  getScopeValue(prefix, keyOrRef) {\n    return this._extScope.getValue(prefix, keyOrRef);\n  } // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n\n\n  scopeRefs(scopeName) {\n    return this._extScope.scopeRefs(scopeName, this._values);\n  }\n\n  scopeCode() {\n    return this._extScope.scopeCode(this._values);\n  }\n\n  _def(varKind, nameOrPrefix, rhs, constant) {\n    const name = this._scope.toName(nameOrPrefix);\n\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n\n    this._leafNode(new Def(varKind, name, rhs));\n\n    return name;\n  } // `const` declaration (`var` in es5 mode)\n\n\n  const(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n  } // `let` declaration with optional assignment (`var` in es5 mode)\n\n\n  let(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n  } // `var` declaration with optional assignment\n\n\n  var(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n  } // assignment code\n\n\n  assign(lhs, rhs, sideEffects) {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects));\n  } // `+=` code\n\n\n  add(lhs, rhs) {\n    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n  } // appends passed SafeExpr to code or executes Block\n\n\n  code(c) {\n    if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n    return this;\n  } // returns code for object literal for the passed argument list of key-value pairs\n\n\n  object(...keyValues) {\n    const code = [\"{\"];\n\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\");\n      code.push(key);\n\n      if (key !== value || this.opts.es5) {\n        code.push(\":\");\n        code_1.addCodeArg(code, value);\n      }\n    }\n\n    code.push(\"}\");\n    return new code_1._Code(code);\n  } // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n\n\n  if(condition, thenBody, elseBody) {\n    this._blockNode(new If(condition));\n\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf();\n    } else if (thenBody) {\n      this.code(thenBody).endIf();\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body');\n    }\n\n    return this;\n  } // `else if` clause - invalid without `if` or after `else` clauses\n\n\n  elseIf(condition) {\n    return this._elseNode(new If(condition));\n  } // `else` clause - only valid after `if` or `else if` clauses\n\n\n  else() {\n    return this._elseNode(new Else());\n  } // end `if` statement (needed if gen.if was used only with condition)\n\n\n  endIf() {\n    return this._endBlockNode(If, Else);\n  }\n\n  _for(node, forBody) {\n    this._blockNode(node);\n\n    if (forBody) this.code(forBody).endFor();\n    return this;\n  } // a generic `for` clause (or statement if `forBody` is passed)\n\n\n  for(iteration, forBody) {\n    return this._for(new ForLoop(iteration), forBody);\n  } // `for` statement for a range of values\n\n\n  forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n    const name = this._scope.toName(nameOrPrefix);\n\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n  } // `for-of` statement (in es5 mode replace with a normal for loop)\n\n\n  forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n    const name = this._scope.toName(nameOrPrefix);\n\n    if (this.opts.es5) {\n      const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n      return this.forRange(\"_i\", 0, code_1._`${arr}.length`, i => {\n        this.var(name, code_1._`${arr}[${i}]`);\n        forBody(name);\n      });\n    }\n\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n  } // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n\n\n  forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, code_1._`Object.keys(${obj})`, forBody);\n    }\n\n    const name = this._scope.toName(nameOrPrefix);\n\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n  } // end `for` loop\n\n\n  endFor() {\n    return this._endBlockNode(For);\n  } // `label` statement\n\n\n  label(label) {\n    return this._leafNode(new Label(label));\n  } // `break` statement\n\n\n  break(label) {\n    return this._leafNode(new Break(label));\n  } // `return` statement\n\n\n  return(value) {\n    const node = new Return();\n\n    this._blockNode(node);\n\n    this.code(value);\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n    return this._endBlockNode(Return);\n  } // `try` statement\n\n\n  try(tryBody, catchCode, finallyCode) {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n    const node = new Try();\n\n    this._blockNode(node);\n\n    this.code(tryBody);\n\n    if (catchCode) {\n      const error = this.name(\"e\");\n      this._currNode = node.catch = new Catch(error);\n      catchCode(error);\n    }\n\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally();\n      this.code(finallyCode);\n    }\n\n    return this._endBlockNode(Catch, Finally);\n  } // `throw` statement\n\n\n  throw(error) {\n    return this._leafNode(new Throw(error));\n  } // start self-balancing block\n\n\n  block(body, nodeCount) {\n    this._blockStarts.push(this._nodes.length);\n\n    if (body) this.code(body).endBlock(nodeCount);\n    return this;\n  } // end the current self-balancing block\n\n\n  endBlock(nodeCount) {\n    const len = this._blockStarts.pop();\n\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n    const toClose = this._nodes.length - len;\n\n    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n    }\n\n    this._nodes.length = len;\n    return this;\n  } // `function` heading (or definition if funcBody is passed)\n\n\n  func(name, args = code_1.nil, async, funcBody) {\n    this._blockNode(new Func(name, args, async));\n\n    if (funcBody) this.code(funcBody).endFunc();\n    return this;\n  } // end function definition\n\n\n  endFunc() {\n    return this._endBlockNode(Func);\n  }\n\n  optimize(n = 1) {\n    while (n-- > 0) {\n      this._root.optimizeNodes();\n\n      this._root.optimizeNames(this._root.names, this._constants);\n    }\n  }\n\n  _leafNode(node) {\n    this._currNode.nodes.push(node);\n\n    return this;\n  }\n\n  _blockNode(node) {\n    this._currNode.nodes.push(node);\n\n    this._nodes.push(node);\n  }\n\n  _endBlockNode(N1, N2) {\n    const n = this._currNode;\n\n    if (n instanceof N1 || N2 && n instanceof N2) {\n      this._nodes.pop();\n\n      return this;\n    }\n\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n  }\n\n  _elseNode(node) {\n    const n = this._currNode;\n\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"');\n    }\n\n    this._currNode = n.else = node;\n    return this;\n  }\n\n  get _root() {\n    return this._nodes[0];\n  }\n\n  get _currNode() {\n    const ns = this._nodes;\n    return ns[ns.length - 1];\n  }\n\n  set _currNode(node) {\n    const ns = this._nodes;\n    ns[ns.length - 1] = node;\n  }\n\n}\n\nexports.CodeGen = CodeGen;\n\nfunction addNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);\n\n  return names;\n}\n\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\n\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce((items, c) => {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);\n    return items;\n  }, []));\n\n  function replaceName(n) {\n    const c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);\n  }\n}\n\nfunction subtractNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);\n}\n\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : code_1._`!${par(x)}`;\n}\n\nexports.not = not;\nconst andCode = mappend(exports.operators.AND); // boolean AND (&&) expression with the passed arguments\n\nfunction and(...args) {\n  return args.reduce(andCode);\n}\n\nexports.and = and;\nconst orCode = mappend(exports.operators.OR); // boolean OR (||) expression with the passed arguments\n\nfunction or(...args) {\n  return args.reduce(orCode);\n}\n\nexports.or = or;\n\nfunction mappend(op) {\n  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : code_1._`${par(x)} ${op} ${par(y)}`;\n}\n\nfunction par(x) {\n  return x instanceof code_1.Name ? x : code_1._`(${x})`;\n}","map":{"version":3,"sources":["D:/happyAngular/node_modules/ajv/dist/compile/codegen/index.js"],"names":["Object","defineProperty","exports","value","or","and","not","CodeGen","operators","varKinds","ValueScopeName","ValueScope","Scope","Name","regexpCode","stringify","getProperty","nil","strConcat","str","_","code_1","require","scope_1","code_2","enumerable","get","scope_2","GT","_Code","GTE","LT","LTE","EQ","NEQ","NOT","OR","AND","ADD","Node","optimizeNodes","optimizeNames","_names","_constants","Def","constructor","varKind","name","rhs","render","es5","_n","var","undefined","names","constants","optimizeExpr","_CodeOrName","Assign","lhs","sideEffects","addExprNames","AssignOp","op","Label","label","Break","Throw","error","AnyCode","code","ParentNode","nodes","opts","reduce","n","i","length","Array","isArray","splice","subtractNames","addNames","BlockNode","Root","Else","kind","If","condition","else","cond","e","ns","_a","For","ForLoop","iteration","ForRange","from","to","ForIter","loop","iterable","Func","args","async","_async","Return","Try","catch","finally","_b","Catch","Finally","extScope","_values","_blockStarts","lines","_extScope","_scope","parent","_nodes","toString","_root","prefix","scopeName","scopeValue","prefixOrName","vs","Set","add","getScopeValue","keyOrRef","getValue","scopeRefs","scopeCode","_def","nameOrPrefix","constant","toName","_leafNode","const","_constant","let","assign","c","object","keyValues","key","push","addCodeArg","if","thenBody","elseBody","_blockNode","endIf","Error","elseIf","_elseNode","_endBlockNode","_for","node","forBody","endFor","for","forRange","forOf","arr","forIn","obj","ownProperties","break","return","try","tryBody","catchCode","finallyCode","_currNode","throw","block","body","nodeCount","endBlock","len","pop","toClose","func","funcBody","endFunc","optimize","N1","N2","expr","replaceName","canOptimize","_items","items","some","x","par","andCode","mappend","orCode","y"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return code_2._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return code_2.str; } });\nObject.defineProperty(exports, \"strConcat\", { enumerable: true, get: function () { return code_2.strConcat; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return code_2.nil; } });\nObject.defineProperty(exports, \"getProperty\", { enumerable: true, get: function () { return code_2.getProperty; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return code_2.stringify; } });\nObject.defineProperty(exports, \"regexpCode\", { enumerable: true, get: function () { return code_2.regexpCode; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return code_2.Name; } });\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return scope_2.Scope; } });\nObject.defineProperty(exports, \"ValueScope\", { enumerable: true, get: function () { return scope_2.ValueScope; } });\nObject.defineProperty(exports, \"ValueScopeName\", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });\nObject.defineProperty(exports, \"varKinds\", { enumerable: true, get: function () { return scope_2.varKinds; } });\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                code_1.addCodeArg(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, code_1._ `${arr}.length`, (i) => {\n                this.var(name, code_1._ `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, code_1._ `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : code_1._ `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : code_1._ `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : code_1._ `(${x})`;\n}\n"]},"metadata":{},"sourceType":"script"}