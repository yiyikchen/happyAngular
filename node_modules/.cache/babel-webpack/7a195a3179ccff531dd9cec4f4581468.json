{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:/happyAngular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\n\nvar validate_1 = require(\"./compile/validate\");\n\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function () {\n    return validate_1.KeywordCxt;\n  }\n});\n\nvar codegen_1 = require(\"./compile/codegen\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.CodeGen;\n  }\n});\n\nconst validation_error_1 = require(\"./runtime/validation_error\");\n\nconst ref_error_1 = require(\"./compile/ref_error\");\n\nconst rules_1 = require(\"./compile/rules\");\n\nconst compile_1 = require(\"./compile\");\n\nconst codegen_2 = require(\"./compile/codegen\");\n\nconst resolve_1 = require(\"./compile/resolve\");\n\nconst dataType_1 = require(\"./compile/validate/dataType\");\n\nconst util_1 = require(\"./compile/util\");\n\nconst $dataRefSchema = require(\"./refs/data.json\");\n\nconst META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nconst EXT_SCOPE_NAMES = new Set([\"validate\", \"serialize\", \"parse\", \"wrapper\", \"root\", \"schema\", \"keyword\", \"pattern\", \"formats\", \"validate$data\", \"func\", \"obj\", \"Error\"]);\nconst removedOptions = {\n  errorDataPath: \"\",\n  format: \"`validateFormats: false` can be used instead.\",\n  nullable: '\"nullable\" keyword is supported by default.',\n  jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n  extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n  missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n  processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n  sourceCode: \"Use option `code: {source: true}`\",\n  strictDefaults: \"It is default now, see option `strict`.\",\n  strictKeywords: \"It is default now, see option `strict`.\",\n  uniqueItems: '\"uniqueItems\" keyword is always validated.',\n  unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n  cache: \"Map is used as cache, schema object as key.\",\n  serialize: \"Map is used as cache, schema object as key.\",\n  ajvErrors: \"It is default now.\"\n};\nconst deprecatedOptions = {\n  ignoreKeywordsWithRef: \"\",\n  jsPropertySyntax: \"\",\n  unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.'\n};\nconst MAX_EXPRESSION = 200; // eslint-disable-next-line complexity\n\nfunction requiredOptions(o) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n\n  const s = o.strict;\n\n  const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n\n  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n  return {\n    strictSchema: (_c = (_b = o.strictSchema) !== null && _b !== void 0 ? _b : s) !== null && _c !== void 0 ? _c : true,\n    strictNumbers: (_e = (_d = o.strictNumbers) !== null && _d !== void 0 ? _d : s) !== null && _e !== void 0 ? _e : true,\n    strictTypes: (_g = (_f = o.strictTypes) !== null && _f !== void 0 ? _f : s) !== null && _g !== void 0 ? _g : \"log\",\n    strictTuples: (_j = (_h = o.strictTuples) !== null && _h !== void 0 ? _h : s) !== null && _j !== void 0 ? _j : \"log\",\n    strictRequired: (_l = (_k = o.strictRequired) !== null && _k !== void 0 ? _k : s) !== null && _l !== void 0 ? _l : false,\n    code: o.code ? { ...o.code,\n      optimize\n    } : {\n      optimize\n    },\n    loopRequired: (_m = o.loopRequired) !== null && _m !== void 0 ? _m : MAX_EXPRESSION,\n    loopEnum: (_o = o.loopEnum) !== null && _o !== void 0 ? _o : MAX_EXPRESSION,\n    meta: (_p = o.meta) !== null && _p !== void 0 ? _p : true,\n    messages: (_q = o.messages) !== null && _q !== void 0 ? _q : true,\n    inlineRefs: (_r = o.inlineRefs) !== null && _r !== void 0 ? _r : true,\n    schemaId: (_s = o.schemaId) !== null && _s !== void 0 ? _s : \"$id\",\n    addUsedSchema: (_t = o.addUsedSchema) !== null && _t !== void 0 ? _t : true,\n    validateSchema: (_u = o.validateSchema) !== null && _u !== void 0 ? _u : true,\n    validateFormats: (_v = o.validateFormats) !== null && _v !== void 0 ? _v : true,\n    unicodeRegExp: (_w = o.unicodeRegExp) !== null && _w !== void 0 ? _w : true,\n    int32range: (_x = o.int32range) !== null && _x !== void 0 ? _x : true\n  };\n}\n\nclass Ajv {\n  constructor(opts = {}) {\n    this.schemas = {};\n    this.refs = {};\n    this.formats = {};\n    this._compilations = new Set();\n    this._loading = {};\n    this._cache = new Map();\n    opts = this.opts = { ...opts,\n      ...requiredOptions(opts)\n    };\n    const {\n      es5,\n      lines\n    } = this.opts.code;\n    this.scope = new codegen_2.ValueScope({\n      scope: {},\n      prefixes: EXT_SCOPE_NAMES,\n      es5,\n      lines\n    });\n    this.logger = getLogger(opts.logger);\n    const formatOpt = opts.validateFormats;\n    opts.validateFormats = false;\n    this.RULES = rules_1.getRules();\n    checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n    checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n    this._metaOpts = getMetaSchemaOptions.call(this);\n    if (opts.formats) addInitialFormats.call(this);\n\n    this._addVocabularies();\n\n    this._addDefaultMetaSchema();\n\n    if (opts.keywords) addInitialKeywords.call(this, opts.keywords);\n    if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta);\n    addInitialSchemas.call(this);\n    opts.validateFormats = formatOpt;\n  }\n\n  _addVocabularies() {\n    this.addKeyword(\"$async\");\n  }\n\n  _addDefaultMetaSchema() {\n    const {\n      $data,\n      meta,\n      schemaId\n    } = this.opts;\n    let _dataRefSchema = $dataRefSchema;\n\n    if (schemaId === \"id\") {\n      _dataRefSchema = { ...$dataRefSchema\n      };\n      _dataRefSchema.id = _dataRefSchema.$id;\n      delete _dataRefSchema.$id;\n    }\n\n    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n  }\n\n  defaultMeta() {\n    const {\n      meta,\n      schemaId\n    } = this.opts;\n    return this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined;\n  }\n\n  validate(schemaKeyRef, // key, ref or schema object\n  data // to be validated\n  ) {\n    let v;\n\n    if (typeof schemaKeyRef == \"string\") {\n      v = this.getSchema(schemaKeyRef);\n      if (!v) throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n    } else {\n      v = this.compile(schemaKeyRef);\n    }\n\n    const valid = v(data);\n    if (!(\"$async\" in v)) this.errors = v.errors;\n    return valid;\n  }\n\n  compile(schema, _meta) {\n    const sch = this._addSchema(schema, _meta);\n\n    return sch.validate || this._compileSchemaEnv(sch);\n  }\n\n  compileAsync(schema, meta) {\n    if (typeof this.opts.loadSchema != \"function\") {\n      throw new Error(\"options.loadSchema should be a function\");\n    }\n\n    const {\n      loadSchema\n    } = this.opts;\n    return runCompileAsync.call(this, schema, meta);\n\n    function runCompileAsync(_x2, _x3) {\n      return _runCompileAsync.apply(this, arguments);\n    }\n\n    function _runCompileAsync() {\n      _runCompileAsync = _asyncToGenerator(function* (_schema, _meta) {\n        yield loadMetaSchema.call(this, _schema.$schema);\n\n        const sch = this._addSchema(_schema, _meta);\n\n        return sch.validate || _compileAsync.call(this, sch);\n      });\n      return _runCompileAsync.apply(this, arguments);\n    }\n\n    function loadMetaSchema(_x4) {\n      return _loadMetaSchema.apply(this, arguments);\n    }\n\n    function _loadMetaSchema() {\n      _loadMetaSchema = _asyncToGenerator(function* ($ref) {\n        if ($ref && !this.getSchema($ref)) {\n          yield runCompileAsync.call(this, {\n            $ref\n          }, true);\n        }\n      });\n      return _loadMetaSchema.apply(this, arguments);\n    }\n\n    function _compileAsync(_x5) {\n      return _compileAsync2.apply(this, arguments);\n    }\n\n    function _compileAsync2() {\n      _compileAsync2 = _asyncToGenerator(function* (sch) {\n        try {\n          return this._compileSchemaEnv(sch);\n        } catch (e) {\n          if (!(e instanceof ref_error_1.default)) throw e;\n          checkLoaded.call(this, e);\n          yield loadMissingSchema.call(this, e.missingSchema);\n          return _compileAsync.call(this, sch);\n        }\n      });\n      return _compileAsync2.apply(this, arguments);\n    }\n\n    function checkLoaded({\n      missingSchema: ref,\n      missingRef\n    }) {\n      if (this.refs[ref]) {\n        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n      }\n    }\n\n    function loadMissingSchema(_x6) {\n      return _loadMissingSchema.apply(this, arguments);\n    }\n\n    function _loadMissingSchema() {\n      _loadMissingSchema = _asyncToGenerator(function* (ref) {\n        const _schema = yield _loadSchema.call(this, ref);\n\n        if (!this.refs[ref]) yield loadMetaSchema.call(this, _schema.$schema);\n        if (!this.refs[ref]) this.addSchema(_schema, ref, meta);\n      });\n      return _loadMissingSchema.apply(this, arguments);\n    }\n\n    function _loadSchema(_x7) {\n      return _loadSchema2.apply(this, arguments);\n    }\n\n    function _loadSchema2() {\n      _loadSchema2 = _asyncToGenerator(function* (ref) {\n        const p = this._loading[ref];\n        if (p) return p;\n\n        try {\n          return yield this._loading[ref] = loadSchema(ref);\n        } finally {\n          delete this._loading[ref];\n        }\n      });\n      return _loadSchema2.apply(this, arguments);\n    }\n  } // Adds schema to the instance\n\n\n  addSchema(schema, // If array is passed, `key` will be ignored\n  key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n  _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n  _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n  ) {\n    if (Array.isArray(schema)) {\n      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema);\n\n      return this;\n    }\n\n    let id;\n\n    if (typeof schema === \"object\") {\n      const {\n        schemaId\n      } = this.opts;\n      id = schema[schemaId];\n\n      if (id !== undefined && typeof id != \"string\") {\n        throw new Error(`schema ${schemaId} must be string`);\n      }\n    }\n\n    key = resolve_1.normalizeId(key || id);\n\n    this._checkUnique(key);\n\n    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n    return this;\n  } // Add schema that will be used to validate other schemas\n  // options in META_IGNORE_OPTIONS are alway set to false\n\n\n  addMetaSchema(schema, key, // schema key\n  _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n  ) {\n    this.addSchema(schema, key, true, _validateSchema);\n    return this;\n  } //  Validate schema against its meta-schema\n\n\n  validateSchema(schema, throwOrLogError) {\n    if (typeof schema == \"boolean\") return true;\n    let $schema;\n    $schema = schema.$schema;\n\n    if ($schema !== undefined && typeof $schema != \"string\") {\n      throw new Error(\"$schema must be a string\");\n    }\n\n    $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n\n    if (!$schema) {\n      this.logger.warn(\"meta-schema not available\");\n      this.errors = null;\n      return true;\n    }\n\n    const valid = this.validate($schema, schema);\n\n    if (!valid && throwOrLogError) {\n      const message = \"schema is invalid: \" + this.errorsText();\n      if (this.opts.validateSchema === \"log\") this.logger.error(message);else throw new Error(message);\n    }\n\n    return valid;\n  } // Get compiled schema by `key` or `ref`.\n  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n\n\n  getSchema(keyRef) {\n    let sch;\n\n    while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\") keyRef = sch;\n\n    if (sch === undefined) {\n      const {\n        schemaId\n      } = this.opts;\n      const root = new compile_1.SchemaEnv({\n        schema: {},\n        schemaId\n      });\n      sch = compile_1.resolveSchema.call(this, root, keyRef);\n      if (!sch) return;\n      this.refs[keyRef] = sch;\n    }\n\n    return sch.validate || this._compileSchemaEnv(sch);\n  } // Remove cached schema(s).\n  // If no parameter is passed all schemas but meta-schemas are removed.\n  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n\n\n  removeSchema(schemaKeyRef) {\n    if (schemaKeyRef instanceof RegExp) {\n      this._removeAllSchemas(this.schemas, schemaKeyRef);\n\n      this._removeAllSchemas(this.refs, schemaKeyRef);\n\n      return this;\n    }\n\n    switch (typeof schemaKeyRef) {\n      case \"undefined\":\n        this._removeAllSchemas(this.schemas);\n\n        this._removeAllSchemas(this.refs);\n\n        this._cache.clear();\n\n        return this;\n\n      case \"string\":\n        {\n          const sch = getSchEnv.call(this, schemaKeyRef);\n          if (typeof sch == \"object\") this._cache.delete(sch.schema);\n          delete this.schemas[schemaKeyRef];\n          delete this.refs[schemaKeyRef];\n          return this;\n        }\n\n      case \"object\":\n        {\n          const cacheKey = schemaKeyRef;\n\n          this._cache.delete(cacheKey);\n\n          let id = schemaKeyRef[this.opts.schemaId];\n\n          if (id) {\n            id = resolve_1.normalizeId(id);\n            delete this.schemas[id];\n            delete this.refs[id];\n          }\n\n          return this;\n        }\n\n      default:\n        throw new Error(\"ajv.removeSchema: invalid parameter\");\n    }\n  } // add \"vocabulary\" - a collection of keywords\n\n\n  addVocabulary(definitions) {\n    for (const def of definitions) this.addKeyword(def);\n\n    return this;\n  }\n\n  addKeyword(kwdOrDef, def // deprecated\n  ) {\n    let keyword;\n\n    if (typeof kwdOrDef == \"string\") {\n      keyword = kwdOrDef;\n\n      if (typeof def == \"object\") {\n        this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n        def.keyword = keyword;\n      }\n    } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n      def = kwdOrDef;\n      keyword = def.keyword;\n\n      if (Array.isArray(keyword) && !keyword.length) {\n        throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n      }\n    } else {\n      throw new Error(\"invalid addKeywords parameters\");\n    }\n\n    checkKeyword.call(this, keyword, def);\n\n    if (!def) {\n      util_1.eachItem(keyword, kwd => addRule.call(this, kwd));\n      return this;\n    }\n\n    keywordMetaschema.call(this, def);\n    const definition = { ...def,\n      type: dataType_1.getJSONTypes(def.type),\n      schemaType: dataType_1.getJSONTypes(def.schemaType)\n    };\n    util_1.eachItem(keyword, definition.type.length === 0 ? k => addRule.call(this, k, definition) : k => definition.type.forEach(t => addRule.call(this, k, definition, t)));\n    return this;\n  }\n\n  getKeyword(keyword) {\n    const rule = this.RULES.all[keyword];\n    return typeof rule == \"object\" ? rule.definition : !!rule;\n  } // Remove keyword\n\n\n  removeKeyword(keyword) {\n    // TODO return type should be Ajv\n    const {\n      RULES\n    } = this;\n    delete RULES.keywords[keyword];\n    delete RULES.all[keyword];\n\n    for (const group of RULES.rules) {\n      const i = group.rules.findIndex(rule => rule.keyword === keyword);\n      if (i >= 0) group.rules.splice(i, 1);\n    }\n\n    return this;\n  } // Add format\n\n\n  addFormat(name, format) {\n    if (typeof format == \"string\") format = new RegExp(format);\n    this.formats[name] = format;\n    return this;\n  }\n\n  errorsText(errors = this.errors, // optional array of validation errors\n  {\n    separator = \", \",\n    dataVar = \"data\"\n  } = {} // optional options with properties `separator` and `dataVar`\n  ) {\n    if (!errors || errors.length === 0) return \"No errors\";\n    return errors.map(e => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);\n  }\n\n  $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n    const rules = this.RULES.all;\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\n\n    for (const jsonPointer of keywordsJsonPointers) {\n      const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n\n      let keywords = metaSchema;\n\n      for (const seg of segments) keywords = keywords[seg];\n\n      for (const key in rules) {\n        const rule = rules[key];\n        if (typeof rule != \"object\") continue;\n        const {\n          $data\n        } = rule.definition;\n        const schema = keywords[key];\n        if ($data && schema) keywords[key] = schemaOrData(schema);\n      }\n    }\n\n    return metaSchema;\n  }\n\n  _removeAllSchemas(schemas, regex) {\n    for (const keyRef in schemas) {\n      const sch = schemas[keyRef];\n\n      if (!regex || regex.test(keyRef)) {\n        if (typeof sch == \"string\") {\n          delete schemas[keyRef];\n        } else if (sch && !sch.meta) {\n          this._cache.delete(sch.schema);\n\n          delete schemas[keyRef];\n        }\n      }\n    }\n  }\n\n  _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {\n    let id;\n    const {\n      schemaId\n    } = this.opts;\n\n    if (typeof schema == \"object\") {\n      id = schema[schemaId];\n    } else {\n      if (this.opts.jtd) throw new Error(\"schema must be object\");else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\");\n    }\n\n    let sch = this._cache.get(schema);\n\n    if (sch !== undefined) return sch;\n    const localRefs = resolve_1.getSchemaRefs.call(this, schema);\n    baseId = resolve_1.normalizeId(id || baseId);\n    sch = new compile_1.SchemaEnv({\n      schema,\n      schemaId,\n      meta,\n      baseId,\n      localRefs\n    });\n\n    this._cache.set(sch.schema, sch);\n\n    if (addSchema && !baseId.startsWith(\"#\")) {\n      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n      if (baseId) this._checkUnique(baseId);\n      this.refs[baseId] = sch;\n    }\n\n    if (validateSchema) this.validateSchema(schema, true);\n    return sch;\n  }\n\n  _checkUnique(id) {\n    if (this.schemas[id] || this.refs[id]) {\n      throw new Error(`schema with key or id \"${id}\" already exists`);\n    }\n  }\n\n  _compileSchemaEnv(sch) {\n    if (sch.meta) this._compileMetaSchema(sch);else compile_1.compileSchema.call(this, sch);\n    /* istanbul ignore if */\n\n    if (!sch.validate) throw new Error(\"ajv implementation error\");\n    return sch.validate;\n  }\n\n  _compileMetaSchema(sch) {\n    const currentOpts = this.opts;\n    this.opts = this._metaOpts;\n\n    try {\n      compile_1.compileSchema.call(this, sch);\n    } finally {\n      this.opts = currentOpts;\n    }\n  }\n\n}\n\nexports.default = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\n\nfunction checkOptions(checkOpts, options, msg, log = \"error\") {\n  for (const key in checkOpts) {\n    const opt = key;\n    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n  }\n}\n\nfunction getSchEnv(keyRef) {\n  keyRef = resolve_1.normalizeId(keyRef); // TODO tests fail without this line\n\n  return this.schemas[keyRef] || this.refs[keyRef];\n}\n\nfunction addInitialSchemas() {\n  const optsSchemas = this.opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);else for (const key in optsSchemas) this.addSchema(optsSchemas[key], key);\n}\n\nfunction addInitialFormats() {\n  for (const name in this.opts.formats) {\n    const format = this.opts.formats[name];\n    if (format) this.addFormat(name, format);\n  }\n}\n\nfunction addInitialKeywords(defs) {\n  if (Array.isArray(defs)) {\n    this.addVocabulary(defs);\n    return;\n  }\n\n  this.logger.warn(\"keywords option as map is deprecated, pass array\");\n\n  for (const keyword in defs) {\n    const def = defs[keyword];\n    if (!def.keyword) def.keyword = keyword;\n    this.addKeyword(def);\n  }\n}\n\nfunction getMetaSchemaOptions() {\n  const metaOpts = { ...this.opts\n  };\n\n  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt];\n\n  return metaOpts;\n}\n\nconst noLogs = {\n  log() {},\n\n  warn() {},\n\n  error() {}\n\n};\n\nfunction getLogger(logger) {\n  if (logger === false) return noLogs;\n  if (logger === undefined) return console;\n  if (logger.log && logger.warn && logger.error) return logger;\n  throw new Error(\"logger must implement log, warn and error methods\");\n}\n\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\n\nfunction checkKeyword(keyword, def) {\n  const {\n    RULES\n  } = this;\n  util_1.eachItem(keyword, kwd => {\n    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);\n    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);\n  });\n  if (!def) return;\n\n  if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n    throw new Error('$data keyword must have \"code\" or \"validate\" function');\n  }\n}\n\nfunction addRule(keyword, definition, dataType) {\n  var _a;\n\n  const post = definition === null || definition === void 0 ? void 0 : definition.post;\n  if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"');\n  const {\n    RULES\n  } = this;\n  let ruleGroup = post ? RULES.post : RULES.rules.find(({\n    type: t\n  }) => t === dataType);\n\n  if (!ruleGroup) {\n    ruleGroup = {\n      type: dataType,\n      rules: []\n    };\n    RULES.rules.push(ruleGroup);\n  }\n\n  RULES.keywords[keyword] = true;\n  if (!definition) return;\n  const rule = {\n    keyword,\n    definition: { ...definition,\n      type: dataType_1.getJSONTypes(definition.type),\n      schemaType: dataType_1.getJSONTypes(definition.schemaType)\n    }\n  };\n  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);else ruleGroup.rules.push(rule);\n  RULES.all[keyword] = rule;\n  (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach(kwd => this.addKeyword(kwd));\n}\n\nfunction addBeforeRule(ruleGroup, rule, before) {\n  const i = ruleGroup.rules.findIndex(_rule => _rule.keyword === before);\n\n  if (i >= 0) {\n    ruleGroup.rules.splice(i, 0, rule);\n  } else {\n    ruleGroup.rules.push(rule);\n    this.logger.warn(`rule ${before} is not defined`);\n  }\n}\n\nfunction keywordMetaschema(def) {\n  let {\n    metaSchema\n  } = def;\n  if (metaSchema === undefined) return;\n  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);\n  def.validateSchema = this.compile(metaSchema, true);\n}\n\nconst $dataRef = {\n  $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"\n};\n\nfunction schemaOrData(schema) {\n  return {\n    anyOf: [schema, $dataRef]\n  };\n}","map":{"version":3,"sources":["D:/happyAngular/node_modules/ajv/dist/core.js"],"names":["Object","defineProperty","exports","value","CodeGen","Name","nil","stringify","str","_","KeywordCxt","validate_1","require","enumerable","get","codegen_1","validation_error_1","ref_error_1","rules_1","compile_1","codegen_2","resolve_1","dataType_1","util_1","$dataRefSchema","META_IGNORE_OPTIONS","EXT_SCOPE_NAMES","Set","removedOptions","errorDataPath","format","nullable","jsonPointers","extendRefs","missingRefs","processCode","sourceCode","strictDefaults","strictKeywords","uniqueItems","unknownFormats","cache","serialize","ajvErrors","deprecatedOptions","ignoreKeywordsWithRef","jsPropertySyntax","unicode","MAX_EXPRESSION","requiredOptions","o","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","s","strict","_optz","code","optimize","undefined","strictSchema","strictNumbers","strictTypes","strictTuples","strictRequired","loopRequired","loopEnum","meta","messages","inlineRefs","schemaId","addUsedSchema","validateSchema","validateFormats","unicodeRegExp","int32range","Ajv","constructor","opts","schemas","refs","formats","_compilations","_loading","_cache","Map","es5","lines","scope","ValueScope","prefixes","logger","getLogger","formatOpt","RULES","getRules","checkOptions","call","_metaOpts","getMetaSchemaOptions","addInitialFormats","_addVocabularies","_addDefaultMetaSchema","keywords","addInitialKeywords","addMetaSchema","addInitialSchemas","addKeyword","$data","_dataRefSchema","id","$id","defaultMeta","validate","schemaKeyRef","data","v","getSchema","Error","compile","valid","errors","schema","_meta","sch","_addSchema","_compileSchemaEnv","compileAsync","loadSchema","runCompileAsync","_schema","loadMetaSchema","$schema","_compileAsync","$ref","e","default","checkLoaded","loadMissingSchema","missingSchema","ref","missingRef","_loadSchema","addSchema","p","key","_validateSchema","Array","isArray","normalizeId","_checkUnique","throwOrLogError","warn","message","errorsText","error","keyRef","getSchEnv","root","SchemaEnv","resolveSchema","removeSchema","RegExp","_removeAllSchemas","clear","delete","cacheKey","addVocabulary","definitions","def","kwdOrDef","keyword","length","checkKeyword","eachItem","kwd","addRule","keywordMetaschema","definition","type","getJSONTypes","schemaType","k","forEach","t","getKeyword","rule","all","removeKeyword","group","rules","i","findIndex","splice","addFormat","name","separator","dataVar","map","instancePath","reduce","text","msg","$dataMetaSchema","metaSchema","keywordsJsonPointers","JSON","parse","jsonPointer","segments","split","slice","seg","schemaOrData","regex","test","baseId","jtd","localRefs","getSchemaRefs","set","startsWith","_compileMetaSchema","compileSchema","currentOpts","ValidationError","MissingRefError","checkOpts","options","log","opt","optsSchemas","defs","metaOpts","noLogs","console","KEYWORD_NAME","dataType","post","ruleGroup","find","push","before","addBeforeRule","implements","_rule","$dataRef","anyOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nvar validate_1 = require(\"./compile/validate\");\nObject.defineProperty(exports, \"KeywordCxt\", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });\nvar codegen_1 = require(\"./compile/codegen\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return codegen_1._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return codegen_1.str; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return codegen_1.stringify; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return codegen_1.nil; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return codegen_1.Name; } });\nObject.defineProperty(exports, \"CodeGen\", { enumerable: true, get: function () { return codegen_1.CodeGen; } });\nconst validation_error_1 = require(\"./runtime/validation_error\");\nconst ref_error_1 = require(\"./compile/ref_error\");\nconst rules_1 = require(\"./compile/rules\");\nconst compile_1 = require(\"./compile\");\nconst codegen_2 = require(\"./compile/codegen\");\nconst resolve_1 = require(\"./compile/resolve\");\nconst dataType_1 = require(\"./compile/validate/dataType\");\nconst util_1 = require(\"./compile/util\");\nconst $dataRefSchema = require(\"./refs/data.json\");\nconst META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nconst EXT_SCOPE_NAMES = new Set([\n    \"validate\",\n    \"serialize\",\n    \"parse\",\n    \"wrapper\",\n    \"root\",\n    \"schema\",\n    \"keyword\",\n    \"pattern\",\n    \"formats\",\n    \"validate$data\",\n    \"func\",\n    \"obj\",\n    \"Error\",\n]);\nconst removedOptions = {\n    errorDataPath: \"\",\n    format: \"`validateFormats: false` can be used instead.\",\n    nullable: '\"nullable\" keyword is supported by default.',\n    jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n    extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n    missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n    processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n    sourceCode: \"Use option `code: {source: true}`\",\n    strictDefaults: \"It is default now, see option `strict`.\",\n    strictKeywords: \"It is default now, see option `strict`.\",\n    uniqueItems: '\"uniqueItems\" keyword is always validated.',\n    unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n    cache: \"Map is used as cache, schema object as key.\",\n    serialize: \"Map is used as cache, schema object as key.\",\n    ajvErrors: \"It is default now.\",\n};\nconst deprecatedOptions = {\n    ignoreKeywordsWithRef: \"\",\n    jsPropertySyntax: \"\",\n    unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.',\n};\nconst MAX_EXPRESSION = 200;\n// eslint-disable-next-line complexity\nfunction requiredOptions(o) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n    const s = o.strict;\n    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n    return {\n        strictSchema: (_c = (_b = o.strictSchema) !== null && _b !== void 0 ? _b : s) !== null && _c !== void 0 ? _c : true,\n        strictNumbers: (_e = (_d = o.strictNumbers) !== null && _d !== void 0 ? _d : s) !== null && _e !== void 0 ? _e : true,\n        strictTypes: (_g = (_f = o.strictTypes) !== null && _f !== void 0 ? _f : s) !== null && _g !== void 0 ? _g : \"log\",\n        strictTuples: (_j = (_h = o.strictTuples) !== null && _h !== void 0 ? _h : s) !== null && _j !== void 0 ? _j : \"log\",\n        strictRequired: (_l = (_k = o.strictRequired) !== null && _k !== void 0 ? _k : s) !== null && _l !== void 0 ? _l : false,\n        code: o.code ? { ...o.code, optimize } : { optimize },\n        loopRequired: (_m = o.loopRequired) !== null && _m !== void 0 ? _m : MAX_EXPRESSION,\n        loopEnum: (_o = o.loopEnum) !== null && _o !== void 0 ? _o : MAX_EXPRESSION,\n        meta: (_p = o.meta) !== null && _p !== void 0 ? _p : true,\n        messages: (_q = o.messages) !== null && _q !== void 0 ? _q : true,\n        inlineRefs: (_r = o.inlineRefs) !== null && _r !== void 0 ? _r : true,\n        schemaId: (_s = o.schemaId) !== null && _s !== void 0 ? _s : \"$id\",\n        addUsedSchema: (_t = o.addUsedSchema) !== null && _t !== void 0 ? _t : true,\n        validateSchema: (_u = o.validateSchema) !== null && _u !== void 0 ? _u : true,\n        validateFormats: (_v = o.validateFormats) !== null && _v !== void 0 ? _v : true,\n        unicodeRegExp: (_w = o.unicodeRegExp) !== null && _w !== void 0 ? _w : true,\n        int32range: (_x = o.int32range) !== null && _x !== void 0 ? _x : true,\n    };\n}\nclass Ajv {\n    constructor(opts = {}) {\n        this.schemas = {};\n        this.refs = {};\n        this.formats = {};\n        this._compilations = new Set();\n        this._loading = {};\n        this._cache = new Map();\n        opts = this.opts = { ...opts, ...requiredOptions(opts) };\n        const { es5, lines } = this.opts.code;\n        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });\n        this.logger = getLogger(opts.logger);\n        const formatOpt = opts.validateFormats;\n        opts.validateFormats = false;\n        this.RULES = rules_1.getRules();\n        checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n        checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n        this._metaOpts = getMetaSchemaOptions.call(this);\n        if (opts.formats)\n            addInitialFormats.call(this);\n        this._addVocabularies();\n        this._addDefaultMetaSchema();\n        if (opts.keywords)\n            addInitialKeywords.call(this, opts.keywords);\n        if (typeof opts.meta == \"object\")\n            this.addMetaSchema(opts.meta);\n        addInitialSchemas.call(this);\n        opts.validateFormats = formatOpt;\n    }\n    _addVocabularies() {\n        this.addKeyword(\"$async\");\n    }\n    _addDefaultMetaSchema() {\n        const { $data, meta, schemaId } = this.opts;\n        let _dataRefSchema = $dataRefSchema;\n        if (schemaId === \"id\") {\n            _dataRefSchema = { ...$dataRefSchema };\n            _dataRefSchema.id = _dataRefSchema.$id;\n            delete _dataRefSchema.$id;\n        }\n        if (meta && $data)\n            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n    }\n    defaultMeta() {\n        const { meta, schemaId } = this.opts;\n        return (this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined);\n    }\n    validate(schemaKeyRef, // key, ref or schema object\n    data // to be validated\n    ) {\n        let v;\n        if (typeof schemaKeyRef == \"string\") {\n            v = this.getSchema(schemaKeyRef);\n            if (!v)\n                throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n        }\n        else {\n            v = this.compile(schemaKeyRef);\n        }\n        const valid = v(data);\n        if (!(\"$async\" in v))\n            this.errors = v.errors;\n        return valid;\n    }\n    compile(schema, _meta) {\n        const sch = this._addSchema(schema, _meta);\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    compileAsync(schema, meta) {\n        if (typeof this.opts.loadSchema != \"function\") {\n            throw new Error(\"options.loadSchema should be a function\");\n        }\n        const { loadSchema } = this.opts;\n        return runCompileAsync.call(this, schema, meta);\n        async function runCompileAsync(_schema, _meta) {\n            await loadMetaSchema.call(this, _schema.$schema);\n            const sch = this._addSchema(_schema, _meta);\n            return sch.validate || _compileAsync.call(this, sch);\n        }\n        async function loadMetaSchema($ref) {\n            if ($ref && !this.getSchema($ref)) {\n                await runCompileAsync.call(this, { $ref }, true);\n            }\n        }\n        async function _compileAsync(sch) {\n            try {\n                return this._compileSchemaEnv(sch);\n            }\n            catch (e) {\n                if (!(e instanceof ref_error_1.default))\n                    throw e;\n                checkLoaded.call(this, e);\n                await loadMissingSchema.call(this, e.missingSchema);\n                return _compileAsync.call(this, sch);\n            }\n        }\n        function checkLoaded({ missingSchema: ref, missingRef }) {\n            if (this.refs[ref]) {\n                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n            }\n        }\n        async function loadMissingSchema(ref) {\n            const _schema = await _loadSchema.call(this, ref);\n            if (!this.refs[ref])\n                await loadMetaSchema.call(this, _schema.$schema);\n            if (!this.refs[ref])\n                this.addSchema(_schema, ref, meta);\n        }\n        async function _loadSchema(ref) {\n            const p = this._loading[ref];\n            if (p)\n                return p;\n            try {\n                return await (this._loading[ref] = loadSchema(ref));\n            }\n            finally {\n                delete this._loading[ref];\n            }\n        }\n    }\n    // Adds schema to the instance\n    addSchema(schema, // If array is passed, `key` will be ignored\n    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n    ) {\n        if (Array.isArray(schema)) {\n            for (const sch of schema)\n                this.addSchema(sch, undefined, _meta, _validateSchema);\n            return this;\n        }\n        let id;\n        if (typeof schema === \"object\") {\n            const { schemaId } = this.opts;\n            id = schema[schemaId];\n            if (id !== undefined && typeof id != \"string\") {\n                throw new Error(`schema ${schemaId} must be string`);\n            }\n        }\n        key = resolve_1.normalizeId(key || id);\n        this._checkUnique(key);\n        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n        return this;\n    }\n    // Add schema that will be used to validate other schemas\n    // options in META_IGNORE_OPTIONS are alway set to false\n    addMetaSchema(schema, key, // schema key\n    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n    ) {\n        this.addSchema(schema, key, true, _validateSchema);\n        return this;\n    }\n    //  Validate schema against its meta-schema\n    validateSchema(schema, throwOrLogError) {\n        if (typeof schema == \"boolean\")\n            return true;\n        let $schema;\n        $schema = schema.$schema;\n        if ($schema !== undefined && typeof $schema != \"string\") {\n            throw new Error(\"$schema must be a string\");\n        }\n        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n        if (!$schema) {\n            this.logger.warn(\"meta-schema not available\");\n            this.errors = null;\n            return true;\n        }\n        const valid = this.validate($schema, schema);\n        if (!valid && throwOrLogError) {\n            const message = \"schema is invalid: \" + this.errorsText();\n            if (this.opts.validateSchema === \"log\")\n                this.logger.error(message);\n            else\n                throw new Error(message);\n        }\n        return valid;\n    }\n    // Get compiled schema by `key` or `ref`.\n    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n    getSchema(keyRef) {\n        let sch;\n        while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\")\n            keyRef = sch;\n        if (sch === undefined) {\n            const { schemaId } = this.opts;\n            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });\n            sch = compile_1.resolveSchema.call(this, root, keyRef);\n            if (!sch)\n                return;\n            this.refs[keyRef] = sch;\n        }\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    // Remove cached schema(s).\n    // If no parameter is passed all schemas but meta-schemas are removed.\n    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n    removeSchema(schemaKeyRef) {\n        if (schemaKeyRef instanceof RegExp) {\n            this._removeAllSchemas(this.schemas, schemaKeyRef);\n            this._removeAllSchemas(this.refs, schemaKeyRef);\n            return this;\n        }\n        switch (typeof schemaKeyRef) {\n            case \"undefined\":\n                this._removeAllSchemas(this.schemas);\n                this._removeAllSchemas(this.refs);\n                this._cache.clear();\n                return this;\n            case \"string\": {\n                const sch = getSchEnv.call(this, schemaKeyRef);\n                if (typeof sch == \"object\")\n                    this._cache.delete(sch.schema);\n                delete this.schemas[schemaKeyRef];\n                delete this.refs[schemaKeyRef];\n                return this;\n            }\n            case \"object\": {\n                const cacheKey = schemaKeyRef;\n                this._cache.delete(cacheKey);\n                let id = schemaKeyRef[this.opts.schemaId];\n                if (id) {\n                    id = resolve_1.normalizeId(id);\n                    delete this.schemas[id];\n                    delete this.refs[id];\n                }\n                return this;\n            }\n            default:\n                throw new Error(\"ajv.removeSchema: invalid parameter\");\n        }\n    }\n    // add \"vocabulary\" - a collection of keywords\n    addVocabulary(definitions) {\n        for (const def of definitions)\n            this.addKeyword(def);\n        return this;\n    }\n    addKeyword(kwdOrDef, def // deprecated\n    ) {\n        let keyword;\n        if (typeof kwdOrDef == \"string\") {\n            keyword = kwdOrDef;\n            if (typeof def == \"object\") {\n                this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n                def.keyword = keyword;\n            }\n        }\n        else if (typeof kwdOrDef == \"object\" && def === undefined) {\n            def = kwdOrDef;\n            keyword = def.keyword;\n            if (Array.isArray(keyword) && !keyword.length) {\n                throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n            }\n        }\n        else {\n            throw new Error(\"invalid addKeywords parameters\");\n        }\n        checkKeyword.call(this, keyword, def);\n        if (!def) {\n            util_1.eachItem(keyword, (kwd) => addRule.call(this, kwd));\n            return this;\n        }\n        keywordMetaschema.call(this, def);\n        const definition = {\n            ...def,\n            type: dataType_1.getJSONTypes(def.type),\n            schemaType: dataType_1.getJSONTypes(def.schemaType),\n        };\n        util_1.eachItem(keyword, definition.type.length === 0\n            ? (k) => addRule.call(this, k, definition)\n            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));\n        return this;\n    }\n    getKeyword(keyword) {\n        const rule = this.RULES.all[keyword];\n        return typeof rule == \"object\" ? rule.definition : !!rule;\n    }\n    // Remove keyword\n    removeKeyword(keyword) {\n        // TODO return type should be Ajv\n        const { RULES } = this;\n        delete RULES.keywords[keyword];\n        delete RULES.all[keyword];\n        for (const group of RULES.rules) {\n            const i = group.rules.findIndex((rule) => rule.keyword === keyword);\n            if (i >= 0)\n                group.rules.splice(i, 1);\n        }\n        return this;\n    }\n    // Add format\n    addFormat(name, format) {\n        if (typeof format == \"string\")\n            format = new RegExp(format);\n        this.formats[name] = format;\n        return this;\n    }\n    errorsText(errors = this.errors, // optional array of validation errors\n    { separator = \", \", dataVar = \"data\" } = {} // optional options with properties `separator` and `dataVar`\n    ) {\n        if (!errors || errors.length === 0)\n            return \"No errors\";\n        return errors\n            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)\n            .reduce((text, msg) => text + separator + msg);\n    }\n    $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n        const rules = this.RULES.all;\n        metaSchema = JSON.parse(JSON.stringify(metaSchema));\n        for (const jsonPointer of keywordsJsonPointers) {\n            const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n            let keywords = metaSchema;\n            for (const seg of segments)\n                keywords = keywords[seg];\n            for (const key in rules) {\n                const rule = rules[key];\n                if (typeof rule != \"object\")\n                    continue;\n                const { $data } = rule.definition;\n                const schema = keywords[key];\n                if ($data && schema)\n                    keywords[key] = schemaOrData(schema);\n            }\n        }\n        return metaSchema;\n    }\n    _removeAllSchemas(schemas, regex) {\n        for (const keyRef in schemas) {\n            const sch = schemas[keyRef];\n            if (!regex || regex.test(keyRef)) {\n                if (typeof sch == \"string\") {\n                    delete schemas[keyRef];\n                }\n                else if (sch && !sch.meta) {\n                    this._cache.delete(sch.schema);\n                    delete schemas[keyRef];\n                }\n            }\n        }\n    }\n    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {\n        let id;\n        const { schemaId } = this.opts;\n        if (typeof schema == \"object\") {\n            id = schema[schemaId];\n        }\n        else {\n            if (this.opts.jtd)\n                throw new Error(\"schema must be object\");\n            else if (typeof schema != \"boolean\")\n                throw new Error(\"schema must be object or boolean\");\n        }\n        let sch = this._cache.get(schema);\n        if (sch !== undefined)\n            return sch;\n        const localRefs = resolve_1.getSchemaRefs.call(this, schema);\n        baseId = resolve_1.normalizeId(id || baseId);\n        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });\n        this._cache.set(sch.schema, sch);\n        if (addSchema && !baseId.startsWith(\"#\")) {\n            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n            if (baseId)\n                this._checkUnique(baseId);\n            this.refs[baseId] = sch;\n        }\n        if (validateSchema)\n            this.validateSchema(schema, true);\n        return sch;\n    }\n    _checkUnique(id) {\n        if (this.schemas[id] || this.refs[id]) {\n            throw new Error(`schema with key or id \"${id}\" already exists`);\n        }\n    }\n    _compileSchemaEnv(sch) {\n        if (sch.meta)\n            this._compileMetaSchema(sch);\n        else\n            compile_1.compileSchema.call(this, sch);\n        /* istanbul ignore if */\n        if (!sch.validate)\n            throw new Error(\"ajv implementation error\");\n        return sch.validate;\n    }\n    _compileMetaSchema(sch) {\n        const currentOpts = this.opts;\n        this.opts = this._metaOpts;\n        try {\n            compile_1.compileSchema.call(this, sch);\n        }\n        finally {\n            this.opts = currentOpts;\n        }\n    }\n}\nexports.default = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\nfunction checkOptions(checkOpts, options, msg, log = \"error\") {\n    for (const key in checkOpts) {\n        const opt = key;\n        if (opt in options)\n            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n    }\n}\nfunction getSchEnv(keyRef) {\n    keyRef = resolve_1.normalizeId(keyRef); // TODO tests fail without this line\n    return this.schemas[keyRef] || this.refs[keyRef];\n}\nfunction addInitialSchemas() {\n    const optsSchemas = this.opts.schemas;\n    if (!optsSchemas)\n        return;\n    if (Array.isArray(optsSchemas))\n        this.addSchema(optsSchemas);\n    else\n        for (const key in optsSchemas)\n            this.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats() {\n    for (const name in this.opts.formats) {\n        const format = this.opts.formats[name];\n        if (format)\n            this.addFormat(name, format);\n    }\n}\nfunction addInitialKeywords(defs) {\n    if (Array.isArray(defs)) {\n        this.addVocabulary(defs);\n        return;\n    }\n    this.logger.warn(\"keywords option as map is deprecated, pass array\");\n    for (const keyword in defs) {\n        const def = defs[keyword];\n        if (!def.keyword)\n            def.keyword = keyword;\n        this.addKeyword(def);\n    }\n}\nfunction getMetaSchemaOptions() {\n    const metaOpts = { ...this.opts };\n    for (const opt of META_IGNORE_OPTIONS)\n        delete metaOpts[opt];\n    return metaOpts;\n}\nconst noLogs = { log() { }, warn() { }, error() { } };\nfunction getLogger(logger) {\n    if (logger === false)\n        return noLogs;\n    if (logger === undefined)\n        return console;\n    if (logger.log && logger.warn && logger.error)\n        return logger;\n    throw new Error(\"logger must implement log, warn and error methods\");\n}\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\nfunction checkKeyword(keyword, def) {\n    const { RULES } = this;\n    util_1.eachItem(keyword, (kwd) => {\n        if (RULES.keywords[kwd])\n            throw new Error(`Keyword ${kwd} is already defined`);\n        if (!KEYWORD_NAME.test(kwd))\n            throw new Error(`Keyword ${kwd} has invalid name`);\n    });\n    if (!def)\n        return;\n    if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n        throw new Error('$data keyword must have \"code\" or \"validate\" function');\n    }\n}\nfunction addRule(keyword, definition, dataType) {\n    var _a;\n    const post = definition === null || definition === void 0 ? void 0 : definition.post;\n    if (dataType && post)\n        throw new Error('keyword with \"post\" flag cannot have \"type\"');\n    const { RULES } = this;\n    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);\n    if (!ruleGroup) {\n        ruleGroup = { type: dataType, rules: [] };\n        RULES.rules.push(ruleGroup);\n    }\n    RULES.keywords[keyword] = true;\n    if (!definition)\n        return;\n    const rule = {\n        keyword,\n        definition: {\n            ...definition,\n            type: dataType_1.getJSONTypes(definition.type),\n            schemaType: dataType_1.getJSONTypes(definition.schemaType),\n        },\n    };\n    if (definition.before)\n        addBeforeRule.call(this, ruleGroup, rule, definition.before);\n    else\n        ruleGroup.rules.push(rule);\n    RULES.all[keyword] = rule;\n    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));\n}\nfunction addBeforeRule(ruleGroup, rule, before) {\n    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);\n    if (i >= 0) {\n        ruleGroup.rules.splice(i, 0, rule);\n    }\n    else {\n        ruleGroup.rules.push(rule);\n        this.logger.warn(`rule ${before} is not defined`);\n    }\n}\nfunction keywordMetaschema(def) {\n    let { metaSchema } = def;\n    if (metaSchema === undefined)\n        return;\n    if (def.$data && this.opts.$data)\n        metaSchema = schemaOrData(metaSchema);\n    def.validateSchema = this.compile(metaSchema, true);\n}\nconst $dataRef = {\n    $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n};\nfunction schemaOrData(schema) {\n    return { anyOf: [schema, $dataRef] };\n}\n"]},"metadata":{},"sourceType":"script"}