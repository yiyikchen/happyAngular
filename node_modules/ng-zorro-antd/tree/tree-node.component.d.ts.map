{"version":3,"file":"tree-node.component.d.ts","sources":["tree-node.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChange, TemplateRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport { NzFormatBeforeDropEvent, NzFormatEmitEvent, NzTreeBaseService, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nexport declare class NzTreeNodeBuiltinComponent implements OnInit, OnChanges, OnDestroy {\n    nzTreeService: NzTreeBaseService;\n    private ngZone;\n    private renderer;\n    private elementRef;\n    private cdr;\n    noAnimation?: NzNoAnimationDirective | undefined;\n    static ngAcceptInputType_nzShowLine: BooleanInput;\n    static ngAcceptInputType_nzShowExpand: BooleanInput;\n    static ngAcceptInputType_nzCheckable: BooleanInput;\n    static ngAcceptInputType_nzAsyncData: BooleanInput;\n    static ngAcceptInputType_nzHideUnMatched: BooleanInput;\n    static ngAcceptInputType_nzNoAnimation: BooleanInput;\n    static ngAcceptInputType_nzSelectMode: BooleanInput;\n    static ngAcceptInputType_nzShowIcon: BooleanInput;\n    /**\n     * for global property\n     */\n    icon: string;\n    title: string;\n    isLoading: boolean;\n    isSelected: boolean;\n    isDisabled: boolean;\n    isMatched: boolean;\n    isExpanded: boolean;\n    isLeaf: boolean;\n    isChecked?: boolean;\n    isHalfChecked?: boolean;\n    isDisableCheckbox?: boolean;\n    isSelectable?: boolean;\n    canHide?: boolean;\n    isStart: boolean[];\n    isEnd: boolean[];\n    nzTreeNode: NzTreeNode;\n    nzShowLine?: boolean;\n    nzShowExpand?: boolean;\n    nzCheckable?: boolean;\n    nzAsyncData?: boolean;\n    nzHideUnMatched: boolean;\n    nzNoAnimation: boolean;\n    nzSelectMode: boolean;\n    nzShowIcon: boolean;\n    nzExpandedIcon?: TemplateRef<{\n        $implicit: NzTreeNode;\n        origin: NzTreeNodeOptions;\n    }>;\n    nzTreeTemplate: TemplateRef<{\n        $implicit: NzTreeNode;\n        origin: NzTreeNodeOptions;\n    }> | null;\n    nzBeforeDrop?: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;\n    nzSearchValue: string;\n    nzDraggable: boolean;\n    readonly nzClick: EventEmitter<NzFormatEmitEvent>;\n    readonly nzDblClick: EventEmitter<NzFormatEmitEvent>;\n    readonly nzContextMenu: EventEmitter<NzFormatEmitEvent>;\n    readonly nzCheckBoxChange: EventEmitter<NzFormatEmitEvent>;\n    readonly nzExpandChange: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDragStart: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDragEnter: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDragOver: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDragLeave: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDrop: EventEmitter<NzFormatEmitEvent>;\n    readonly nzOnDragEnd: EventEmitter<NzFormatEmitEvent>;\n    /**\n     * drag var\n     */\n    destroy$: Subject<unknown>;\n    dragPos: number;\n    dragPosClass: {\n        [key: string]: string;\n    };\n    showIndicator: boolean;\n    /**\n     * default set\n     */\n    get displayStyle(): string;\n    get isSwitcherOpen(): boolean;\n    get isSwitcherClose(): boolean;\n    onMousedown(event: MouseEvent): void;\n    /**\n     * collapse node\n     *\n     * @param event\n     */\n    clickExpand(event: MouseEvent): void;\n    clickSelect(event: MouseEvent): void;\n    dblClick(event: MouseEvent): void;\n    contextMenu(event: MouseEvent): void;\n    /**\n     * check node\n     *\n     * @param event\n     */\n    clickCheckBox(event: MouseEvent): void;\n    clearDragClass(): void;\n    /**\n     * drag event\n     *\n     * @param e\n     */\n    handleDragStart(e: DragEvent): void;\n    handleDragEnter(e: DragEvent): void;\n    handleDragOver(e: DragEvent): void;\n    handleDragLeave(e: DragEvent): void;\n    handleDragDrop(e: DragEvent): void;\n    handleDragEnd(e: DragEvent): void;\n    /**\n     * Listening to dragging events.\n     */\n    handDragEvent(): void;\n    markForCheck(): void;\n    constructor(nzTreeService: NzTreeBaseService, ngZone: NgZone, renderer: Renderer2, elementRef: ElementRef, cdr: ChangeDetectorRef, noAnimation?: NzNoAnimationDirective | undefined);\n    ngOnInit(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    ngOnDestroy(): void;\n    private renderIndicator;\n}\n"]}