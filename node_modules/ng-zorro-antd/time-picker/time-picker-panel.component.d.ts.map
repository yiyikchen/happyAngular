{"version":3,"file":"time-picker-panel.component.d.ts","sources":["time-picker-panel.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { ChangeDetectorRef, DebugElement, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { DateHelperService } from 'ng-zorro-antd/i18n';\nimport { TimeHolder } from './time-holder';\nexport declare type NzTimePickerUnit = 'hour' | 'minute' | 'second' | '12-hour';\nexport declare class NzTimePickerPanelComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {\n    private cdr;\n    dateHelper: DateHelperService;\n    private elementRef;\n    static ngAcceptInputType_nzUse12Hours: BooleanInput;\n    private _nzHourStep;\n    private _nzMinuteStep;\n    private _nzSecondStep;\n    private unsubscribe$;\n    private onChange?;\n    private onTouch?;\n    private _format;\n    private _disabledHours?;\n    private _disabledMinutes?;\n    private _disabledSeconds?;\n    private _allowEmpty;\n    time: TimeHolder;\n    hourEnabled: boolean;\n    minuteEnabled: boolean;\n    secondEnabled: boolean;\n    firstScrolled: boolean;\n    enabledColumns: number;\n    hourRange: ReadonlyArray<{\n        index: number;\n        disabled: boolean;\n    }>;\n    minuteRange: ReadonlyArray<{\n        index: number;\n        disabled: boolean;\n    }>;\n    secondRange: ReadonlyArray<{\n        index: number;\n        disabled: boolean;\n    }>;\n    use12HoursRange: ReadonlyArray<{\n        index: number;\n        value: string;\n    }>;\n    hourListElement?: DebugElement;\n    minuteListElement?: DebugElement;\n    secondListElement?: DebugElement;\n    use12HoursListElement?: DebugElement;\n    nzInDatePicker: boolean;\n    nzAddOn?: TemplateRef<void>;\n    nzHideDisabledOptions: boolean;\n    nzClearText?: string;\n    nzNowText?: string;\n    nzOkText?: string;\n    nzPlaceHolder?: string | null;\n    nzUse12Hours: boolean;\n    nzDefaultOpenValue?: Date;\n    readonly closePanel: EventEmitter<void>;\n    set nzAllowEmpty(value: boolean);\n    get nzAllowEmpty(): boolean;\n    set nzDisabledHours(value: undefined | (() => number[]));\n    get nzDisabledHours(): undefined | (() => number[]);\n    set nzDisabledMinutes(value: undefined | ((hour: number) => number[]));\n    get nzDisabledMinutes(): undefined | ((hour: number) => number[]);\n    set nzDisabledSeconds(value: undefined | ((hour: number, minute: number) => number[]));\n    get nzDisabledSeconds(): undefined | ((hour: number, minute: number) => number[]);\n    set format(value: string);\n    get format(): string;\n    set nzHourStep(value: number);\n    get nzHourStep(): number;\n    set nzMinuteStep(value: number);\n    get nzMinuteStep(): number;\n    set nzSecondStep(value: number);\n    get nzSecondStep(): number;\n    trackByFn(index: number): number;\n    buildHours(): void;\n    buildMinutes(): void;\n    buildSeconds(): void;\n    build12Hours(): void;\n    buildTimes(): void;\n    scrollToTime(delay?: number): void;\n    selectHour(hour: {\n        index: number;\n        disabled: boolean;\n    }): void;\n    selectMinute(minute: {\n        index: number;\n        disabled: boolean;\n    }): void;\n    selectSecond(second: {\n        index: number;\n        disabled: boolean;\n    }): void;\n    select12Hours(value: {\n        index: number;\n        value: string;\n    }): void;\n    scrollToSelected(instance: HTMLElement, index: number, duration: number | undefined, unit: NzTimePickerUnit): void;\n    translateIndex(index: number, unit: NzTimePickerUnit): number;\n    scrollTo(element: HTMLElement, to: number, duration: number): void;\n    calcIndex(array: number[] | undefined, index: number): number;\n    protected changed(): void;\n    protected touched(): void;\n    timeDisabled(value: Date): boolean;\n    onClickNow(): void;\n    onClickOk(): void;\n    isSelectedHour(hour: {\n        index: number;\n        disabled: boolean;\n    }): boolean;\n    isSelectedMinute(minute: {\n        index: number;\n        disabled: boolean;\n    }): boolean;\n    isSelectedSecond(second: {\n        index: number;\n        disabled: boolean;\n    }): boolean;\n    isSelected12Hours(value: {\n        index: number;\n        value: string;\n    }): boolean;\n    constructor(cdr: ChangeDetectorRef, dateHelper: DateHelperService, elementRef: ElementRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    writeValue(value: Date): void;\n    registerOnChange(fn: (value: Date) => void): void;\n    registerOnTouched(fn: () => void): void;\n    /**\n     * Prevent input losing focus when click panel\n     *\n     * @param event\n     */\n    onMousedown(event: MouseEvent): void;\n}\n"]}