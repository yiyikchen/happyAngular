{"version":3,"file":"cascader.component.d.ts","sources":["cascader.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { CdkConnectedOverlay, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport { BooleanInput, NgClassType, NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzCascaderI18nInterface, NzI18nService } from 'ng-zorro-antd/i18n';\nimport { NzCascaderOptionComponent } from './cascader-li.component';\nimport { NzCascaderService } from './cascader.service';\nimport { NzCascaderComponentAsSource, NzCascaderExpandTrigger, NzCascaderOption, NzCascaderSize, NzCascaderTriggerType, NzShowSearchOptions } from './typings';\nexport declare class NzCascaderComponent implements NzCascaderComponentAsSource, OnInit, OnDestroy, ControlValueAccessor {\n    cascaderService: NzCascaderService;\n    nzConfigService: NzConfigService;\n    private cdr;\n    private i18nService;\n    private directionality;\n    noAnimation?: NzNoAnimationDirective | undefined;\n    readonly _nzModuleName: NzConfigKey;\n    static ngAcceptInputType_nzShowInput: BooleanInput;\n    static ngAcceptInputType_nzShowArrow: BooleanInput;\n    static ngAcceptInputType_nzAllowClear: BooleanInput;\n    static ngAcceptInputType_nzAutoFocus: BooleanInput;\n    static ngAcceptInputType_nzChangeOnSelect: BooleanInput;\n    static ngAcceptInputType_nzDisabled: BooleanInput;\n    input: ElementRef;\n    menu: ElementRef;\n    overlay: CdkConnectedOverlay;\n    cascaderItems: QueryList<NzCascaderOptionComponent>;\n    nzOptionRender: TemplateRef<{\n        $implicit: NzCascaderOption;\n        index: number;\n    }> | null;\n    nzShowInput: boolean;\n    nzShowArrow: boolean;\n    nzAllowClear: boolean;\n    nzAutoFocus: boolean;\n    nzChangeOnSelect: boolean;\n    nzDisabled: boolean;\n    nzColumnClassName?: string;\n    nzExpandTrigger: NzCascaderExpandTrigger;\n    nzValueProperty: string;\n    nzLabelRender: TemplateRef<void> | null;\n    nzLabelProperty: string;\n    nzNotFoundContent?: string | TemplateRef<void>;\n    nzSize: NzCascaderSize;\n    nzBackdrop: boolean;\n    nzShowSearch: boolean | NzShowSearchOptions;\n    nzPlaceHolder: string;\n    nzMenuClassName?: string;\n    nzMenuStyle: NgStyleInterface | null;\n    nzMouseEnterDelay: number;\n    nzMouseLeaveDelay: number;\n    nzTriggerAction: NzCascaderTriggerType | NzCascaderTriggerType[];\n    nzChangeOn?: (option: NzCascaderOption, level: number) => boolean;\n    nzLoadData?: (node: NzCascaderOption, index: number) => PromiseLike<NzSafeAny>;\n    nzSuffixIcon: string | TemplateRef<void>;\n    nzExpandIcon: string | TemplateRef<void>;\n    get nzOptions(): NzCascaderOption[] | null;\n    set nzOptions(options: NzCascaderOption[] | null);\n    readonly nzVisibleChange: EventEmitter<boolean>;\n    readonly nzSelectionChange: EventEmitter<NzCascaderOption[]>;\n    readonly nzSelect: EventEmitter<{\n        option: NzCascaderOption;\n        index: number;\n    } | null>;\n    readonly nzClear: EventEmitter<void>;\n    /**\n     * If the dropdown should show the empty content.\n     * `true` if there's no options.\n     */\n    shouldShowEmpty: boolean;\n    el: HTMLElement;\n    menuVisible: boolean;\n    isLoading: boolean;\n    labelRenderText?: string;\n    labelRenderContext: {};\n    onChange: Function;\n    onTouched: Function;\n    positions: ConnectionPositionPair[];\n    /**\n     * Dropdown's with in pixel.\n     */\n    dropdownWidthStyle?: string;\n    dropdownHeightStyle: 'auto' | '';\n    isFocused: boolean;\n    locale: NzCascaderI18nInterface;\n    dir: Direction;\n    private destroy$;\n    private inputString;\n    private isOpening;\n    private delayMenuTimer;\n    private delaySelectTimer;\n    get inSearchingMode(): boolean;\n    set inputValue(inputValue: string);\n    get inputValue(): string;\n    get menuCls(): NgClassType;\n    get menuColumnCls(): NgClassType;\n    private get hasInput();\n    private get hasValue();\n    get showPlaceholder(): boolean;\n    get clearIconVisible(): boolean;\n    get isLabelRenderTemplate(): boolean;\n    constructor(cascaderService: NzCascaderService, nzConfigService: NzConfigService, cdr: ChangeDetectorRef, i18nService: NzI18nService, elementRef: ElementRef, renderer: Renderer2, directionality: Directionality, noAnimation?: NzNoAnimationDirective | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: () => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    writeValue(value: NzSafeAny): void;\n    delaySetMenuVisible(visible: boolean, delay?: number, setOpening?: boolean): void;\n    setMenuVisible(visible: boolean): void;\n    private clearDelayMenuTimer;\n    clearSelection(event?: Event): void;\n    getSubmitValue(): NzSafeAny[];\n    focus(): void;\n    blur(): void;\n    handleInputBlur(): void;\n    handleInputFocus(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    onTriggerClick(): void;\n    onTriggerMouseEnter(): void;\n    onTriggerMouseLeave(event: MouseEvent): void;\n    onOptionMouseEnter(option: NzCascaderOption, columnIndex: number, event: Event): void;\n    onOptionMouseLeave(option: NzCascaderOption, _columnIndex: number, event: Event): void;\n    onOptionClick(option: NzCascaderOption, columnIndex: number, event: Event): void;\n    onClickOutside(event: MouseEvent): void;\n    private isActionTrigger;\n    private onEnter;\n    private moveUpOrDown;\n    private moveLeft;\n    private moveRight;\n    private clearDelaySelectTimer;\n    private delaySetOptionActivated;\n    private toggleSearchingMode;\n    isOptionActivated(option: NzCascaderOption, index: number): boolean;\n    setDisabledState(isDisabled: boolean): void;\n    closeMenu(): void;\n    /**\n     * Reposition the cascader panel. When a menu opens, the cascader expands\n     * and may exceed the boundary of browser's window.\n     */\n    private reposition;\n    /**\n     * When a cascader options is changed, a child needs to know that it should re-render.\n     */\n    private checkChildren;\n    private setDisplayLabel;\n    private setDropdownStyles;\n    private setLocale;\n    private scrollToActivatedOptions;\n}\n"]}