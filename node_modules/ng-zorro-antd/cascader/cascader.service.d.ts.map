{"version":3,"file":"cascader.service.d.ts","sources":["cascader.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzCascaderComponentAsSource, NzCascaderOption, NzCascaderSearchOption } from './typings';\n/**\n * All data is stored and parsed in NzCascaderService.\n */\nexport declare class NzCascaderService implements OnDestroy {\n    /** Activated options in each column. */\n    activatedOptions: NzCascaderOption[];\n    /** An array to store cascader items arranged in different layers. */\n    columns: NzCascaderOption[][];\n    /** If user has entered searching mode. */\n    inSearchingMode: boolean;\n    /** Selected options would be output to user. */\n    selectedOptions: NzCascaderOption[];\n    values: NzSafeAny[];\n    readonly $loading: BehaviorSubject<boolean>;\n    /**\n     * Emit an event to notify cascader it needs to redraw because activated or\n     * selected options are changed.\n     */\n    readonly $redraw: Subject<void>;\n    /**\n     * Emit an event when an option gets selected.\n     * Emit true if a leaf options is selected.\n     */\n    readonly $optionSelected: Subject<{\n        option: NzCascaderOption;\n        index: number;\n    } | null>;\n    /**\n     * Emit an event to notify cascader it needs to quit searching mode.\n     * Only emit when user do select a searching option.\n     */\n    readonly $quitSearching: Subject<void>;\n    /** To hold columns before entering searching mode. */\n    private columnsSnapshot;\n    /** To hold activated options before entering searching mode. */\n    private activatedOptionsSnapshot;\n    private cascaderComponent;\n    /** Return cascader options in the first layer. */\n    get nzOptions(): NzCascaderOption[];\n    ngOnDestroy(): void;\n    /**\n     * Make sure that value matches what is displayed in the dropdown.\n     */\n    syncOptions(first?: boolean): void;\n    /**\n     * Bind cascader component so this service could use inputs.\n     */\n    withComponent(cascaderComponent: NzCascaderComponentAsSource): void;\n    /**\n     * Reset all options. Rebuild searching options if in searching mode.\n     */\n    withOptions(options: NzCascaderOption[] | null): void;\n    /**\n     * Try to set a option as activated.\n     *\n     * @param option Cascader option\n     * @param columnIndex Of which column this option is in\n     * @param performSelect Select\n     * @param loadingChildren Try to load children asynchronously.\n     */\n    setOptionActivated(option: NzCascaderOption, columnIndex: number, performSelect?: boolean, loadingChildren?: boolean): void;\n    setOptionSelected(option: NzCascaderOption, index: number): void;\n    setOptionDeactivatedSinceColumn(column: number): void;\n    /**\n     * Set a searching option as selected, finishing up things.\n     *\n     * @param option\n     */\n    setSearchOptionSelected(option: NzCascaderSearchOption): void;\n    /**\n     * Filter cascader options to reset `columns`.\n     *\n     * @param searchValue The string user wants to search.\n     */\n    prepareSearchOptions(searchValue: string): void;\n    /**\n     * Toggle searching mode by UI. It deals with things not directly related to UI.\n     *\n     * @param toSearching If this cascader is entering searching mode\n     */\n    toggleSearchingMode(toSearching: boolean): void;\n    /**\n     * Clear selected options.\n     */\n    clear(): void;\n    getOptionLabel(o: NzCascaderOption): string;\n    getOptionValue(o: NzCascaderOption): NzSafeAny;\n    /**\n     * Try to insert options into a column.\n     *\n     * @param options Options to insert\n     * @param columnIndex Position\n     */\n    private setColumnData;\n    /**\n     * Set all ancestor options as activated.\n     */\n    private trackAncestorActivatedOptions;\n    private dropBehindActivatedOptions;\n    private dropBehindColumns;\n    /**\n     * Load children of an option asynchronously.\n     */\n    loadChildren(option: NzCascaderOption | NzSafeAny, columnIndex: number, success?: VoidFunction, failure?: VoidFunction): void;\n    private isLoaded;\n    /**\n     * Find a option that has a given value in a given column.\n     */\n    private findOptionWithValue;\n    private prepareEmitValue;\n}\n"]}