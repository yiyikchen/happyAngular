{"version":3,"file":"modal.component.d.ts","sources":["modal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NzButtonType } from 'ng-zorro-antd/button';\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzModalLegacyAPI } from './modal-legacy-api';\nimport { NzModalRef } from './modal-ref';\nimport { ModalButtonOptions, ModalTypes, OnClickCallback, StyleObjectLike } from './modal-types';\nimport { NzModalService } from './modal.service';\nexport declare class NzModalComponent<T = NzSafeAny, R = NzSafeAny> implements OnChanges, NzModalLegacyAPI<T, R>, OnDestroy {\n    private cdr;\n    private modal;\n    private viewContainerRef;\n    static ngAcceptInputType_nzMask: BooleanInput;\n    static ngAcceptInputType_nzMaskClosable: BooleanInput;\n    static ngAcceptInputType_nzCloseOnNavigation: BooleanInput;\n    static ngAcceptInputType_nzVisible: BooleanInput;\n    static ngAcceptInputType_nzClosable: BooleanInput;\n    static ngAcceptInputType_nzOkLoading: BooleanInput;\n    static ngAcceptInputType_nzOkDisabled: BooleanInput;\n    static ngAcceptInputType_nzCancelDisabled: BooleanInput;\n    static ngAcceptInputType_nzCancelLoading: BooleanInput;\n    static ngAcceptInputType_nzKeyboard: BooleanInput;\n    static ngAcceptInputType_nzNoAnimation: BooleanInput;\n    static ngAcceptInputType_nzOkDanger: BooleanInput;\n    static ngAcceptInputType_nzCentered: BooleanInput;\n    nzMask?: boolean;\n    nzMaskClosable?: boolean;\n    nzCloseOnNavigation?: boolean;\n    nzVisible: boolean;\n    nzClosable: boolean;\n    nzOkLoading: boolean;\n    nzOkDisabled: boolean;\n    nzCancelDisabled: boolean;\n    nzCancelLoading: boolean;\n    nzKeyboard: boolean;\n    nzNoAnimation: boolean;\n    nzCentered: boolean;\n    nzContent?: string | TemplateRef<{}> | Type<T>;\n    nzComponentParams?: T;\n    nzFooter?: string | TemplateRef<{}> | Array<ModalButtonOptions<T>> | null;\n    nzZIndex: number;\n    nzWidth: number | string;\n    nzWrapClassName?: string;\n    nzClassName?: string;\n    nzStyle?: object;\n    nzTitle?: string | TemplateRef<{}>;\n    nzCloseIcon: string | TemplateRef<void>;\n    nzMaskStyle?: StyleObjectLike;\n    nzBodyStyle?: StyleObjectLike;\n    nzOkText?: string | null;\n    nzCancelText?: string | null;\n    nzOkType: NzButtonType;\n    nzOkDanger: boolean;\n    nzIconType: string;\n    nzModalType: ModalTypes;\n    nzAutofocus: 'ok' | 'cancel' | 'auto' | null;\n    readonly nzOnOk: EventEmitter<T> | OnClickCallback<T> | NzSafeAny;\n    readonly nzOnCancel: EventEmitter<T> | OnClickCallback<T> | NzSafeAny;\n    readonly nzAfterOpen: EventEmitter<void>;\n    readonly nzAfterClose: EventEmitter<R>;\n    readonly nzVisibleChange: EventEmitter<boolean>;\n    set modalTitle(value: TemplateRef<NzSafeAny>);\n    contentFromContentChild: TemplateRef<NzSafeAny>;\n    set modalFooter(value: TemplateRef<NzSafeAny>);\n    private modalRef;\n    private destroy$;\n    get afterOpen(): Observable<void>;\n    get afterClose(): Observable<R>;\n    constructor(cdr: ChangeDetectorRef, modal: NzModalService, viewContainerRef: ViewContainerRef);\n    open(): void;\n    close(result?: R): void;\n    destroy(result?: R): void;\n    triggerOk(): void;\n    triggerCancel(): void;\n    getContentComponent(): T | void;\n    getElement(): HTMLElement | void;\n    getModalRef(): NzModalRef | null;\n    private setTitleWithTemplate;\n    private setFooterWithTemplate;\n    private getConfig;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}