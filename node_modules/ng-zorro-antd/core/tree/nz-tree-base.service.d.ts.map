{"version":3,"file":"nz-tree-base.service.d.ts","sources":["nz-tree-base.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { BehaviorSubject } from 'rxjs';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\nimport { NzFormatEmitEvent } from './nz-tree-base.definitions';\nexport declare class NzTreeBaseService {\n    DRAG_SIDE_RANGE: number;\n    DRAG_MIN_GAP: number;\n    isCheckStrictly: boolean;\n    isMultiple: boolean;\n    selectedNode: NzTreeNode;\n    rootNodes: NzTreeNode[];\n    flattenNodes$: BehaviorSubject<NzTreeNode[]>;\n    selectedNodeList: NzTreeNode[];\n    expandedNodeList: NzTreeNode[];\n    checkedNodeList: NzTreeNode[];\n    halfCheckedNodeList: NzTreeNode[];\n    matchedNodeList: NzTreeNode[];\n    /**\n     * reset tree nodes will clear default node list\n     */\n    initTree(nzNodes: NzTreeNode[]): void;\n    flattenTreeData(nzNodes: NzTreeNode[], expandedKeys?: NzTreeNodeKey[] | true): void;\n    getSelectedNode(): NzTreeNode | null;\n    /**\n     * get some list\n     */\n    getSelectedNodeList(): NzTreeNode[];\n    /**\n     * return checked nodes\n     */\n    getCheckedNodeList(): NzTreeNode[];\n    getHalfCheckedNodeList(): NzTreeNode[];\n    /**\n     * return expanded nodes\n     */\n    getExpandedNodeList(): NzTreeNode[];\n    /**\n     * return search matched nodes\n     */\n    getMatchedNodeList(): NzTreeNode[];\n    isArrayOfNzTreeNode(value: NzSafeAny[]): boolean;\n    /**\n     * set drag node\n     */\n    setSelectedNode(node: NzTreeNode): void;\n    /**\n     * set node selected status\n     */\n    setNodeActive(node: NzTreeNode): void;\n    /**\n     * add or remove node to selectedNodeList\n     */\n    setSelectedNodeList(node: NzTreeNode, isMultiple?: boolean): void;\n    /**\n     * merge checked nodes\n     */\n    setHalfCheckedNodeList(node: NzTreeNode): void;\n    setCheckedNodeList(node: NzTreeNode): void;\n    /**\n     * conduct checked/selected/expanded keys\n     */\n    conductNodeState(type?: string): NzTreeNode[];\n    /**\n     * set expanded nodes\n     */\n    setExpandedNodeList(node: NzTreeNode): void;\n    setMatchedNodeList(node: NzTreeNode): void;\n    /**\n     * check state\n     *\n     * @param isCheckStrictly\n     */\n    refreshCheckState(isCheckStrictly?: boolean): void;\n    conduct(node: NzTreeNode, isCheckStrictly?: boolean): void;\n    /**\n     * 1、children half checked\n     * 2、children all checked, parent checked\n     * 3、no children checked\n     */\n    conductUp(node: NzTreeNode): void;\n    /**\n     * reset child check state\n     */\n    conductDown(node: NzTreeNode, value: boolean): void;\n    /**\n     * flush after delete node\n     */\n    afterRemove(nodes: NzTreeNode[]): void;\n    /**\n     * drag event\n     */\n    refreshDragNode(node: NzTreeNode): void;\n    resetNodeLevel(node: NzTreeNode): void;\n    calcDropPosition(event: DragEvent): number;\n    /**\n     * drop\n     * 0: inner -1: pre 1: next\n     */\n    dropAndApply(targetNode: NzTreeNode, dragPos?: number): void;\n    /**\n     * emit Structure\n     * eventName\n     * node\n     * event: MouseEvent / DragEvent\n     * dragNode\n     */\n    formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent;\n    /**\n     * New functions for flatten nodes\n     */\n    getIndexOfArray(list: NzTreeNode[], key: string): number;\n    /**\n     * Render by nzCheckedKeys\n     * When keys equals null, just render with checkStrictly\n     *\n     * @param keys\n     * @param checkStrictly\n     */\n    conductCheck(keys: NzTreeNodeKey[] | null, checkStrictly: boolean): void;\n    conductExpandedKeys(keys?: NzTreeNodeKey[] | true): void;\n    conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void;\n    /**\n     * Expand parent nodes by child node\n     *\n     * @param node\n     */\n    expandNodeAllParentBySearch(node: NzTreeNode): void;\n}\n"]}