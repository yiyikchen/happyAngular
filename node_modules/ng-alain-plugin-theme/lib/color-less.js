"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genColorLess = void 0;
const utils_1 = require("./utils");
const color_generator_1 = require("./color-generator");
const fs_1 = require("fs");
const primaryColorVariable = '@primary-color';
function fixConfig(config) {
    config = utils_1.deepMergeKey({
        variables: [],
        ngZorroAntd: `./node_modules/ng-zorro-antd/`,
        styleFilePath: `./src/styles.less`,
        themeFilePath: `./src/styles/theme.less`,
        outputFilePath: `./src/assets/color.less`,
    }, false, config);
    if (!Array.isArray(config.variables)) {
        config.variables = [];
    }
    if (!config.variables.includes(primaryColorVariable)) {
        config.variables.push(primaryColorVariable);
    }
    return config;
}
function genColorLess(config) {
    return __awaiter(this, void 0, void 0, function* () {
        config = fixConfig(config);
        if (fs_1.existsSync(config.outputFilePath)) {
            fs_1.unlinkSync(config.outputFilePath);
        }
        yield color_generator_1.generateTheme(config);
    });
}
exports.genColorLess = genColorLess;
