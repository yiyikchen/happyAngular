"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTheme = void 0;
const less_1 = __importDefault(require("less"));
const path_1 = require("path");
const fs_1 = require("fs");
const lessToJs = require('less-vars-to-js');
const postcss = require('postcss');
const LessPluginCleanCSS = require('less-plugin-clean-css');
const LessPluginNpmImport = require('less-plugin-npm-import');
const utils_1 = require("./utils");
const root = process.cwd();
let nodeModulesPath = '';
function buildLess(content, min = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const plugins = [new LessPluginNpmImport({ prefix: '~' })];
        if (min) {
            plugins.push(new LessPluginCleanCSS({ advanced: true }));
        }
        const res = yield less_1.default.render(content, {
            javascriptEnabled: true,
            plugins,
        });
        return res.css;
    });
}
function combineLess(filePath) {
    if (!fs_1.existsSync(filePath)) {
        return '';
    }
    const fileContent = fs_1.readFileSync(filePath).toString();
    const directory = path_1.dirname(filePath);
    return fileContent
        .split('\n')
        .map((line) => {
        if (!line.startsWith('@import')) {
            return line;
        }
        let importPath = line.match(/@import\ ["'](.*)["'];/)[1];
        if (!importPath.endsWith('.less')) {
            importPath += '.less';
        }
        let newPath = path_1.join(directory, importPath);
        if (importPath.startsWith('~')) {
            importPath = importPath.replace('~', '');
            newPath = path_1.join(nodeModulesPath, `./${importPath}`);
        }
        return combineLess(newPath);
    })
        .join('\n');
}
function randomColor() {
    return '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);
}
function getShade(varName) {
    const match = varName.match(/(.*)-(\d)/);
    let className = match[1];
    if (/primary-\d/.test(varName)) {
        className = '@primary-color';
    }
    return 'color(~`colorPalette("@{' + className.replace('@', '') + '}", ' + match[2] + ')`)';
}
function generateColorMap(themeFilePath) {
    const varFileContent = combineLess(themeFilePath);
    const mappings = lessToJs(varFileContent, {
        stripPrefix: false,
        resolveVariables: false,
    });
    return mappings;
}
function getMatches(string, regex) {
    const matches = {};
    let match;
    while ((match = regex.exec(string))) {
        if (match[2].startsWith('rgba') || match[2].startsWith('#')) {
            matches[`@${match[1]}`] = match[2];
        }
    }
    return matches;
}
function getValidThemeVars(mappings, variables, antdPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const randomColors = {};
        const randomColorsVars = {};
        const themeVars = variables.filter((name) => name in mappings && !name.match(/(.*)-(\d)/));
        const themeVarsCss = [];
        themeVars.forEach((varName) => {
            let color = randomColor();
            while (randomColorsVars[color]) {
                color = randomColor();
            }
            randomColors[varName] = color;
            randomColorsVars[color] = varName;
            themeVarsCss.push(`.${varName.replace('@', '')} { color: ${color}; }`);
        });
        const varsContent = [];
        themeVars.forEach(varName => {
            [1, 2, 3, 4, 5, 7, 8, 9, 10].forEach(key => {
                const name = varName === '@primary-color' ? `@primary-${key}` : `${varName}-${key}`;
                themeVarsCss.push(`.${name.replace('@', '')} { color: ${getShade(name)}; }`);
            });
            varsContent.push(`${varName}: ${randomColors[varName]};`);
        });
        const colorFileContent = combineLess(path_1.join(antdPath, './style/color/colors.less'));
        const css = yield buildLess(`${colorFileContent}\n${varsContent.join('\n')}\n${themeVarsCss.reverse().join('\n')}`);
        const regex = /.(?=\S*['-])([.a-zA-Z0-9'-]+)\ {\n {2}color: (.*);/g;
        const themeCompiledVars = getMatches(css.replace(/(\/.*\/)/g, ''), regex);
        return { themeVars, randomColors, randomColorsVars, themeCompiledVars };
    });
}
function generateTheme(config) {
    return __awaiter(this, void 0, void 0, function* () {
        nodeModulesPath = path_1.join(root, config.nodeModulesPath || 'node_modules');
        try {
            const mappings = generateColorMap(config.themeFilePath);
            const { themeVars, themeCompiledVars } = yield getValidThemeVars(mappings, config.variables, config.ngZorroAntd);
            const varsCombined = [];
            themeVars.forEach(varName => {
                let color;
                if (/(.*)-(\d)/.test(varName)) {
                    color = getShade(varName);
                    return;
                }
                else {
                    color = themeCompiledVars[varName];
                }
                varsCombined.push(`${varName}: ${color};`);
            });
            const allLessContent = `
    @import '${config.styleFilePath}';
    ${varsCombined.join('\n')}
  `;
            utils_1.d(config, `All vars`, allLessContent);
            let css = yield buildLess(allLessContent);
            css = yield postcss([reducePlugin]).process(css).css;
            Object.keys(themeCompiledVars).forEach(varName => {
                let color;
                if (/(.*)-(\d)/.test(varName)) {
                    color = themeCompiledVars[varName];
                    varName = getShade(varName);
                }
                else {
                    color = themeCompiledVars[varName];
                }
                color = color.replace('(', '\\(').replace(')', '\\)');
                css = css.replace(new RegExp(color, 'g'), `${varName}`);
            });
            css = css.replace(/@[\w-_]+:\s*.*;[\/.]*/gm, '').replace(/\\9/g, '');
            const antdStyle = combineLess(path_1.join(config.ngZorroAntd, './style/themes/default.less'));
            css += `\n\n${antdStyle}`;
            themeVars.reverse().forEach(varName => {
                css = css.replace(new RegExp(`${varName}( *):(.*);`, 'g'), '');
                css = `${varName}: ${mappings[varName]};\n${css}\n`;
            });
            css = minifyCss(css);
            if (config.outputFilePath) {
                fs_1.writeFileSync(config.outputFilePath, css);
                console.log(`âœ… Color less generated successfully. Output: ${config.outputFilePath}`);
            }
            else {
                console.log('Theme generated successfully');
            }
            return css;
        }
        catch (ex) {
            console.log('error', ex);
            return '';
        }
    });
}
exports.generateTheme = generateTheme;
const reducePlugin = postcss.plugin('reducePlugin', () => {
    const cleanRule = (rule) => {
        if (rule.selector.startsWith('.main-color .palatte-')) {
            rule.remove();
            return;
        }
        let removeRule = true;
        rule.walkDecls((decl) => {
            if (String(decl.value).match(/url\(.*\)/g)) {
                decl.remove();
            }
            const matched = false;
            if (!decl.prop.includes('color') &&
                !decl.prop.includes('background') &&
                !decl.prop.includes('border') &&
                !decl.prop.includes('box-shadow') &&
                !Number.isNaN(decl.value)) {
                decl.remove();
            }
            else {
                removeRule = matched ? removeRule : false;
            }
        });
        if (removeRule) {
            rule.remove();
        }
    };
    return (css) => {
        css.walkAtRules((atRule) => {
            atRule.remove();
        });
        css.walkRules(cleanRule);
        css.walkComments((c) => c.remove());
    };
});
function minifyCss(css) {
    css = css.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, '').replace(/^\s*$(?:\r\n?|\n)/gm, '');
    css = css.replace(/\{(\r\n?|\n)\s+/g, '{');
    css = css.replace(/;(\r\n?|\n)\}/g, ';}');
    css = css.replace(/;(\r\n?|\n)\s+/g, ';');
    css = css.replace(/,(\r\n?|\n)[.]/g, ', .');
    return css;
}
