{"version":3,"file":"mock.umd.js","sources":["../../../../packages/mock/src/interface.ts","../../../../packages/mock/src/status.error.ts","../../../../packages/mock/src/mock.config.ts","../../../../packages/mock/src/mock.service.ts","../../../../packages/mock/src/mock.interceptor.ts","../../../../packages/mock/src/mock.module.ts","../../../../packages/mock/mock.ts"],"sourcesContent":["import { HttpRequest } from '@angular/common/http';\n\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport class MockOptions {\n  data?: NzSafeAny;\n}\n\nexport interface MockCachedRule {\n  [key: string]: NzSafeAny;\n\n  method: string;\n\n  url: string;\n\n  martcher: RegExp | null;\n\n  segments: string[];\n\n  callback(req: MockRequest): NzSafeAny;\n}\n\nexport interface MockRule {\n  [key: string]: NzSafeAny;\n\n  method: string;\n\n  url: string;\n\n  /** Ë∑ØÁî±ÂèÇÊï∞ */\n  params?: NzSafeAny;\n\n  callback(req: MockRequest): NzSafeAny;\n}\n\nexport interface MockRequest {\n  /** Ë∑ØÁî±ÂèÇÊï∞ */\n  params?: NzSafeAny;\n  /** URLÂèÇÊï∞ */\n  queryString?: NzSafeAny;\n  headers?: NzSafeAny;\n  body?: NzSafeAny;\n  /** ÂéüÂßã `HttpRequest` */\n  original: HttpRequest<NzSafeAny>;\n}\n","import type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport class MockStatusError {\n  statusText: string;\n\n  constructor(public status: number, public error?: NzSafeAny) {}\n}\n","import { AlainMockConfig } from '@delon/util/config';\n\nexport const MOCK_DEFULAT_CONFIG: AlainMockConfig = {\n  delay: 300,\n  force: false,\n  log: true,\n  executeOtherInterceptors: true\n};\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { AlainConfigService, AlainMockConfig } from '@delon/util/config';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { MockCachedRule, MockOptions, MockRule } from './interface';\nimport { MOCK_DEFULAT_CONFIG } from './mock.config';\n\n@Injectable({ providedIn: 'root' })\nexport class MockService implements OnDestroy {\n  private cached: MockCachedRule[] = [];\n  readonly config: AlainMockConfig;\n\n  constructor(cogSrv: AlainConfigService, options: MockOptions) {\n    this.config = cogSrv.merge('mock', MOCK_DEFULAT_CONFIG)!;\n    this.setData(options?.data);\n  }\n\n  /**\n   * Reset request data\n   *\n   * ÈáçÊñ∞ËÆæÁΩÆËØ∑Ê±ÇÊï∞ÊçÆ\n   */\n  setData(data: NzSafeAny): void {\n    this.applyMock(data);\n  }\n\n  // #region parse rule\n\n  private applyMock(data: NzSafeAny): void {\n    this.cached = [];\n    try {\n      this.realApplyMock(data);\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n\n  private realApplyMock(data: NzSafeAny): void {\n    if (!data) return;\n    Object.keys(data).forEach((key: string) => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach((ruleKey: string) => {\n        const value = rules[ruleKey];\n        if (!(typeof value === 'function' || typeof value === 'object' || typeof value === 'string')) {\n          throw Error(\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`\n          );\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(w => w.url === rule.url && w.method === rule.method);\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort((a, b) => (b.martcher || '').toString().length - (a.martcher || '').toString().length);\n  }\n\n  private genRule(key: string, callback: NzSafeAny): MockCachedRule {\n    let method = 'GET';\n    let url = key;\n\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n\n    let martcher: RegExp | null = null;\n    let segments: string[] = [];\n    if (~url.indexOf(':')) {\n      segments = url!\n        .split('/')\n        .filter(segment => segment.startsWith(':'))\n        .map(v => v.substring(1));\n      const reStr = url!\n        .split('/')\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\n        .join('/');\n      martcher = new RegExp(`^${reStr}`, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase()\n    };\n  }\n\n  private outputError(error: NzSafeAny): void {\n    const filePath = error.message.split(': ')[0];\n    const errors = (error.stack as string)\n      .split('\\n')\n      .filter(line => line.trim().indexOf('at ') !== 0)\n      .map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, '');\n\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n\n    throw error;\n  }\n\n  // #endregion\n\n  getRule(method: string, url: string): MockRule | null {\n    method = (method || 'GET').toUpperCase();\n    const params: NzSafeAny = {};\n    const list = this.cached.filter(w => w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url));\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr!.slice(1).map((value: string, index: number) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback\n    };\n  }\n\n  clearCache(): void {\n    this.cached = [];\n  }\n\n  get rules(): MockCachedRule[] {\n    return this.cached;\n  }\n\n  ngOnDestroy(): void {\n    this.clearCache();\n  }\n}\n","import {\n  HttpBackend,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n  HttpResponseBase,\n  HTTP_INTERCEPTORS\n} from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { deepCopy } from '@delon/util/other';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { MockRequest } from './interface';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\n\nclass HttpMockInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<NzSafeAny>): Observable<HttpEvent<NzSafeAny>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n@Injectable()\nexport class MockInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(req: HttpRequest<NzSafeAny>, next: HttpHandler): Observable<HttpEvent<NzSafeAny>> {\n    const src = this.injector.get(MockService);\n    const config = src.config;\n    const rule = src.getRule(req.method, req.url.split('?')[0]);\n    if (!rule && !config.force) {\n      return next.handle(req);\n    }\n\n    let res: NzSafeAny;\n    switch (typeof rule!.callback) {\n      case 'function':\n        const mockRequest: MockRequest = {\n          original: req,\n          body: req.body,\n          queryString: {},\n          headers: {},\n          params: rule!.params\n        };\n        const urlParams = req.url.split('?');\n        if (urlParams.length > 1) {\n          urlParams[1].split('&').forEach(item => {\n            const itemArr = item.split('=');\n            const key = itemArr[0];\n            const value = itemArr[1];\n            // is array\n            if (Object.keys(mockRequest.queryString).includes(key)) {\n              if (!Array.isArray(mockRequest.queryString[key])) {\n                mockRequest.queryString[key] = [mockRequest.queryString[key]];\n              }\n              mockRequest.queryString[key].push(value);\n            } else {\n              mockRequest.queryString[key] = value;\n            }\n          });\n        }\n        req.params.keys().forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\n        req.headers.keys().forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\n\n        try {\n          res = rule!.callback.call(this, mockRequest);\n        } catch (e) {\n          res = new HttpErrorResponse({\n            url: req.url,\n            headers: req.headers,\n            status: e instanceof MockStatusError ? e.status : 400,\n            statusText: e.statusText || 'Unknown Error',\n            error: e.error\n          });\n        }\n        break;\n      default:\n        res = rule!.callback;\n        break;\n    }\n\n    if (!(res instanceof HttpResponseBase)) {\n      res = new HttpResponse({\n        status: 200,\n        url: req.url,\n        body: res\n      });\n    }\n\n    if (res.body) {\n      res.body = deepCopy(res.body);\n    }\n\n    if (config.log) {\n      console.log(`%cüëΩ${req.method}->${req.urlWithParams}->request`, 'background:#000;color:#bada55', req);\n      console.log(`%cüëΩ${req.method}->${req.urlWithParams}->response`, 'background:#000;color:#bada55', res);\n    }\n\n    const res$ = res instanceof HttpErrorResponse ? throwError(res) : of(res);\n\n    if (config.executeOtherInterceptors) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      const lastInterceptors = interceptors.slice(interceptors.indexOf(this) + 1);\n      if (lastInterceptors.length > 0) {\n        const chain = lastInterceptors.reduceRight(\n          (_next, _interceptor) => new HttpMockInterceptorHandler(_next, _interceptor),\n          {\n            handle: () => res$\n          } as HttpBackend\n        );\n        return chain.handle(req).pipe(delay(config.delay!));\n      }\n    }\n\n    return res$.pipe(delay(config.delay!));\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { MockOptions } from './interface';\nimport { MockInterceptor } from './mock.interceptor';\n\n@NgModule({})\nexport class DelonMockModule {\n  static forRoot(options?: MockOptions): ModuleWithProviders<DelonMockModule> {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        { provide: MockOptions, useValue: options },\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }\n      ]\n    };\n  }\n\n  static forChild(): ModuleWithProviders<DelonMockModule> {\n    return {\n      ngModule: DelonMockModule,\n      providers: [{ provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true }]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Injectable","AlainConfigService","HttpErrorResponse","HttpResponseBase","HttpResponse","deepCopy","throwError","of","HTTP_INTERCEPTORS","delay","Injector","NgModule"],"mappings":"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"}