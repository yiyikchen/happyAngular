{"version":3,"file":"delon-util-array.js","sources":["../../../../packages/util/array/array.service.ts","../../../../packages/util/array/delon-util-array.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Injectable } from '@angular/core';\n\nimport { AlainConfigService, AlainUtilArrayConfig } from '@delon/util/config';\nimport { NzTreeNode } from 'ng-zorro-antd/core/tree';\n\nimport {\n  ArrayServiceArrToTreeNodeOptions,\n  ArrayServiceArrToTreeOptions,\n  ArrayServiceGetKeysByTreeNodeOptions,\n  ArrayServiceGroupByResult,\n  ArrayServiceTreeToArrOptions\n} from './array-type.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ArrayService {\n  private c: AlainUtilArrayConfig;\n\n  constructor(cog: AlainConfigService) {\n    this.c = cog.merge('utilArray', {\n      deepMapName: 'deep',\n      parentMapName: 'parent',\n      idMapName: 'id',\n      parentIdMapName: 'parent_id',\n      childrenMapName: 'children',\n      titleMapName: 'title',\n      checkedMapname: 'checked',\n      selectedMapname: 'selected',\n      expandedMapname: 'expanded',\n      disabledMapname: 'disabled'\n    })!;\n  }\n\n  /**\n   * Convert tree structure to array structure\n   *\n   * 将树结构转换成数组结构\n   */\n  treeToArr<T extends object = any>(tree: readonly T[], options?: ArrayServiceTreeToArrOptions<T>): T[] {\n    const opt = {\n      deepMapName: this.c.deepMapName,\n      parentMapName: this.c.parentMapName,\n      childrenMapName: this.c.childrenMapName,\n      clearChildren: true,\n      cb: null,\n      ...options\n    } as ArrayServiceTreeToArrOptions;\n    const result: Array<{ [key: string]: any }> = [];\n    const inFn = (list: ReadonlyArray<{ [key: string]: any }>, parent: T | null, deep: number = 0) => {\n      for (const i of list) {\n        i[opt.deepMapName!] = deep;\n        i[opt.parentMapName!] = parent;\n        if (opt.cb) {\n          opt.cb(i, parent, deep);\n        }\n        result.push(i);\n        const children = i[opt.childrenMapName!];\n        if (children != null && Array.isArray(children) && children.length > 0) {\n          inFn(children, i as T, deep + 1);\n        }\n        if (opt.clearChildren) {\n          delete i[opt.childrenMapName!];\n        }\n      }\n    };\n    inFn(tree, null);\n    return result as T[];\n  }\n\n  /**\n   * Convert array structure to tree structure\n   *\n   * 数组转换成树数据\n   */\n  arrToTree<T extends object = any>(arr: readonly T[], options?: ArrayServiceArrToTreeOptions<T>): T[] {\n    if (!Array.isArray(arr) || arr.length === 0) {\n      return [];\n    }\n\n    const opt = {\n      idMapName: this.c.idMapName,\n      parentIdMapName: this.c.parentIdMapName,\n      childrenMapName: this.c.childrenMapName,\n      cb: null,\n      ...options\n    } as ArrayServiceArrToTreeOptions<T>;\n    const tree: T[] = [];\n    const childrenOf: { [key: string]: T[] } = {};\n    let rootPid = opt.rootParentIdValue;\n    const arrType = arr as ReadonlyArray<{ [key: string]: any }>;\n    if (!rootPid) {\n      const pids = arrType.map(i => i[opt.parentIdMapName!]);\n      const emptyPid = pids.findIndex(w => w == null);\n      rootPid = emptyPid !== -1 ? pids[emptyPid] : pids.sort()[0];\n    }\n    for (const item of arrType) {\n      const id = item[opt.idMapName!];\n      const pid = item[opt.parentIdMapName!];\n      childrenOf[id] = childrenOf[id] || [];\n      item[opt.childrenMapName!] = childrenOf[id];\n      if (opt.cb) {\n        opt.cb(item as T);\n      }\n      if (pid !== rootPid) {\n        childrenOf[pid] = childrenOf[pid] || [];\n        childrenOf[pid].push(item as T);\n      } else {\n        tree.push(item as T);\n      }\n    }\n    return tree;\n  }\n\n  /**\n   * 数组转换成 `nz-tree` 数据源，通过 `options` 转化项名，也可以使用 `options.cb` 更高级决定数据项\n   */\n  arrToTreeNode<T extends object = any>(arr: readonly T[], options?: ArrayServiceArrToTreeNodeOptions): NzTreeNode[] {\n    const opt = {\n      idMapName: this.c.idMapName,\n      parentIdMapName: this.c.parentIdMapName,\n      titleMapName: this.c.titleMapName,\n      isLeafMapName: 'isLeaf',\n      checkedMapname: this.c.checkedMapname,\n      selectedMapname: this.c.selectedMapname,\n      expandedMapname: this.c.expandedMapname,\n      disabledMapname: this.c.disabledMapname,\n      cb: null,\n      ...options\n    } as ArrayServiceArrToTreeNodeOptions<T>;\n    const tree = this.arrToTree<T>(arr, {\n      idMapName: opt.idMapName,\n      parentIdMapName: opt.parentIdMapName,\n      childrenMapName: 'children'\n    });\n    this.visitTree<T>(tree, (item: { [key: string]: any }, parent, deep) => {\n      item.key = item[opt.idMapName!];\n      item.title = item[opt.titleMapName!];\n      item.checked = item[opt.checkedMapname!];\n      item.selected = item[opt.selectedMapname!];\n      item.expanded = item[opt.expandedMapname!];\n      item.disabled = item[opt.disabledMapname!];\n      if (item[opt.isLeafMapName!] == null) {\n        item.isLeaf = item.children.length === 0;\n      } else {\n        item.isLeaf = item[opt.isLeafMapName!];\n      }\n      if (opt.cb) {\n        opt.cb(item as any, parent, deep);\n      }\n    });\n    return tree.map(node => new NzTreeNode(node as any));\n  }\n\n  /**\n   * 递归访问整个树\n   */\n  visitTree<T extends object = any>(\n    tree: readonly T[],\n    cb: (item: T, parent: T | null, deep: number) => void,\n    options?: {\n      /** 子项名，默认：`'children'` */\n      childrenMapName?: string;\n    }\n  ): void {\n    options = {\n      childrenMapName: this.c.childrenMapName,\n      ...options\n    };\n    const inFn = (data: readonly T[], parent: T | null, deep: number) => {\n      for (const item of data) {\n        cb(item, parent, deep);\n        const childrenVal = (item as { [key: string]: any })[options!.childrenMapName!];\n        if (Array.isArray(childrenVal) && childrenVal.length > 0) {\n          inFn(childrenVal, item, deep + 1);\n        }\n      }\n    };\n    inFn(tree, null, 1);\n  }\n\n  /**\n   * Return the value of the first tree value in the tree where predicate is true, and `undefined` otherwise\n   *\n   * 根据条件返回树的第一个值，否则返回 `undefined`\n   */\n  findTree<T extends object = any>(\n    tree: readonly T[],\n    predicate: (item: T) => boolean,\n    options?: {\n      /** 子项名，默认：`'children'` */\n      childrenMapName?: string;\n    }\n  ): T | undefined {\n    let res: T | undefined;\n    this.visitTree<T>(\n      tree,\n      item => {\n        if (res === undefined && predicate(item)) {\n          res = item;\n        }\n      },\n      options\n    );\n    return res;\n  }\n\n  /**\n   * 获取所有已经选中的 `key` 值\n   */\n  getKeysByTreeNode(tree: NzTreeNode[], options?: ArrayServiceGetKeysByTreeNodeOptions): any[] {\n    const opt = {\n      includeHalfChecked: true,\n      ...options\n    } as ArrayServiceGetKeysByTreeNodeOptions;\n    const keys: any[] = [];\n    this.visitTree<NzTreeNode>(tree, (item, parent, deep) => {\n      if (item.isChecked || (opt.includeHalfChecked && item.isHalfChecked)) {\n        keys.push(opt.cb ? opt.cb(item, parent, deep) : opt.keyMapName ? item.origin[opt.keyMapName] : item.key);\n      }\n    });\n    return keys;\n  }\n  private baseFlat(array: any[], depth: number, result: any[] = []): any[] {\n    let index = -1;\n    while (++index < array.length) {\n      const value = array[index];\n      if (depth > 0 && Array.isArray(value)) {\n        if (depth > 1) {\n          this.baseFlat(value, depth - 1, result);\n        } else {\n          let pushIndex = -1;\n          const offset = result.length;\n\n          while (++pushIndex < value.length) {\n            result[offset + pushIndex] = value[pushIndex];\n          }\n        }\n      } else {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Recursively flattens array\n   *\n   * 递归扁平数组\n   * ```ts\n   * srv.flat([1, [2, 3, [4, 5, [6]]]]) => [1,2,3,4,5,6]\n   * srv.flat([1, [2, 3, [4, 5, [6]]]], 1) => [1,2,3,[4, 5, [6]]]\n   * ```\n   */\n  flat<T>(array: readonly T[], depth: number = 1 / 0): T[] {\n    return Array.isArray(array) ? this.baseFlat(array as any[], depth) : (array as T[]);\n  }\n  /**\n   * Group the array\n   *\n   * 对数组进行分组\n   * ```ts\n   * srv.groupBy([6.1, 4.2, 6.3], Math.floor) => {\"4\":[4.2],\"6\":[6.1,6.3]}\n   * srv.groupBy(['one', 'two', 'three'], v => v.length) => {\"3\":[\"one\",\"two\"],\"5\":[\"three\"]}\n   * ```\n   */\n  groupBy<T>(array: readonly T[], iteratee: (value: T) => string | number): ArrayServiceGroupByResult {\n    if (!Array.isArray(array)) {\n      return {};\n    }\n    return array.reduce((result, value) => {\n      const key = iteratee(value);\n      if (Object.prototype.hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        result[key] = [value];\n      }\n      return result;\n    }, {} as ArrayServiceGroupByResult);\n  }\n  /**\n   * Creates a duplicate-free version of an array\n   *\n   * 创建去重后的数组\n   * ```ts\n   * uniq([1, 2, 2, 3, 1]) => [1,2,3]\n   * uniq([{ a: 1 }, { a: 1 }, { a: 2 }], 'a') => [{\"a\":1},{\"a\":2}]\n   * uniq([{ a: 1 }, { a: 1 }, { a: 2 }], i => (i.a === 1 ? 'a' : 'b')) => [{\"a\":1},{\"a\":2}]\n   * ```\n   */\n  uniq<T>(array: readonly T[], predicate?: string | ((value: T) => string | number | boolean)): T[] {\n    return Array.from(\n      array\n        .reduce((map, value) => {\n          const key = predicate\n            ? typeof predicate === 'string'\n              ? (value as any)[predicate]\n              : predicate!(value)\n            : value;\n          if (!map.has(key)) {\n            map.set(key, value);\n          }\n          return map;\n        }, new Map<string | number | boolean, T>())\n        .values()\n    );\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}