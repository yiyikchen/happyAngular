{"version":3,"file":"i18n.d.ts","sources":["i18n.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AlainConfigService } from '@delon/util/config';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\nexport interface AlainI18NService {\n    [key: string]: NzSafeAny;\n    /**\n     * Call `use` to trigger change notification\n     *\n     * 调用 `use` 触发变更通知\n     */\n    readonly change: Observable<string>;\n    /**\n     * Get the default language\n     *\n     * 获取默认语言\n     */\n    readonly defaultLang: string;\n    /**\n     * Get current language\n     *\n     * 获取当前语言\n     */\n    readonly currentLang: string;\n    /**\n     * Change language\n     *\n     * 变更语言\n     *\n     * @param emit 是否触发 `change`，默认：true ; Should be removed, please use `change` event instead.\n     */\n    use(lang: string, data?: Record<string, string>): void;\n    /**\n     * Return to the current language list\n     *\n     * 返回当前语言列表\n     */\n    getLangs(): NzSafeAny[];\n    /**\n     * Translate 翻译\n     *\n     * @param params 模板所需要的参数对象\n     * @param isSafe 是否返回安全字符，自动调用 `bypassSecurityTrustHtml`; Should be removed, If you need SafeHtml support, please use `| html` pipe instead.\n     */\n    fanyi(path: string, params?: unknown): string;\n}\nexport declare const ALAIN_I18N_TOKEN: InjectionToken<AlainI18NService>;\nexport declare abstract class AlainI18nBaseService implements AlainI18NService {\n    private cog;\n    protected _change$: BehaviorSubject<string | null>;\n    protected _currentLang: string;\n    protected _defaultLang: string;\n    protected _data: Record<string, string>;\n    get change(): Observable<string>;\n    get defaultLang(): string;\n    get currentLang(): string;\n    get data(): Record<string, string>;\n    constructor(cogSrv: AlainConfigService);\n    abstract use(lang: string, data?: Record<string, string>): void;\n    abstract getLangs(): NzSafeAny[];\n    fanyi(path: string, params?: Record<string, unknown>): string;\n}\nexport declare class AlainI18NServiceFake extends AlainI18nBaseService {\n    use(lang: string, data: Record<string, string>): void;\n    getLangs(): NzSafeAny[];\n}\n"]}