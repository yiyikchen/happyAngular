{"version":3,"file":"menu.service.d.ts","sources":["menu.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ACLService } from '@delon/acl';\nimport { AlainI18NService } from '../i18n/i18n';\nimport { Menu } from './interface';\n/**\n * 菜单服务，[在线文档](https://ng-alain.com/theme/menu)\n */\nexport declare class MenuService implements OnDestroy {\n    private i18nSrv;\n    private aclService;\n    private _change$;\n    private i18n$;\n    private data;\n    constructor(i18nSrv: AlainI18NService, aclService: ACLService);\n    get change(): Observable<Menu[]>;\n    visit(data: Menu[], callback: (item: Menu, parentMenum: Menu | null, depth?: number) => void): void;\n    add(items: Menu[]): void;\n    private fixItem;\n    /**\n     * 重置菜单，可能I18N、用户权限变动时需要调用刷新\n     */\n    resume(callback?: (item: Menu, parentMenum: Menu | null, depth?: number) => void): void;\n    /**\n     * 加载快捷菜单，加载位置规则如下：\n     * 1、统一在下标0的节点下（即【主导航】节点下方）\n     *      1、若 children 存在 【shortcutRoot: true】则最优先【推荐】这种方式\n     *      2、否则查找带有【dashboard】字样链接，若存在则在此菜单的下方创建快捷入口\n     *      3、否则放在0节点位置\n     */\n    private loadShortcut;\n    get menus(): Menu[];\n    /**\n     * 清空菜单\n     */\n    clear(): void;\n    getHit(data: Menu[], url: string, recursive?: boolean, cb?: ((i: Menu) => void) | null): Menu | null;\n    /**\n     * 根据URL设置菜单 `_open` 属性\n     * - 若 `recursive: true` 则会自动向上递归查找\n     *  - 菜单数据源包含 `/ware`，则 `/ware/1` 也视为 `/ware` 项\n     */\n    openedByUrl(url: string | null, recursive?: boolean): void;\n    /**\n     * 根据url获取菜单列表\n     * - 若 `recursive: true` 则会自动向上递归查找\n     *  - 菜单数据源包含 `/ware`，则 `/ware/1` 也视为 `/ware` 项\n     */\n    getPathByUrl(url: string, recursive?: boolean): Menu[];\n    /**\n     * Get menu based on `key`\n     */\n    getItem(key: string): Menu | null;\n    /**\n     * Set menu based on `key`\n     */\n    setItem(key: string, value: Menu): void;\n    ngOnDestroy(): void;\n}\n"]}