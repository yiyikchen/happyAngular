{"version":3,"file":"http.decorator.d.ts","sources":["http.decorator.d.ts"],"names":[],"mappingssourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Injector } from '@angular/core';\n/**\n * Every http decorator must be based on `BaseAPI`, Like this:\n * ```ts\n * \\@Injectable()\n * class DataService extends BaseApi {}\n * ```\n */\nexport declare abstract class BaseApi {\n    protected injector: Injector;\n    constructor(injector: Injector);\n}\nexport interface HttpOptions {\n    /** ACL配置，若导入 `@delon/acl` 时自动有效，等同于 `ACLService.can(roleOrAbility: ACLCanType)` 参数值 */\n    acl?: any;\n    observe?: 'body' | 'events' | 'response';\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    reportProgress?: boolean;\n    withCredentials?: boolean;\n}\n/**\n * 默认基准URL\n * - 有效范围：类\n */\nexport declare function BaseUrl(url: string): <TClass extends new (...args: any[]) => BaseApi>(target: TClass) => TClass;\n/**\n * 默认 `headers`\n * - 有效范围：类\n */\nexport declare function BaseHeaders(headers: HttpHeaders | {\n    [header: string]: string | string[];\n}): <TClass extends new (...args: any[]) => BaseApi>(target: TClass) => TClass;\n/**\n * URL路由参数\n * - 有效范围：方法参数\n */\nexport declare const Path: (key?: string | undefined) => (target: BaseApi, propertyKey: string, index: number) => void;\n/**\n * URL 参数 `QueryString`\n * - 有效范围：方法参数\n */\nexport declare const Query: (key?: string | undefined) => (target: BaseApi, propertyKey: string, index: number) => void;\n/**\n * 参数 `Body`\n * - 有效范围：方法参数\n */\nexport declare const Body: (target: BaseApi, propertyKey: string, index: number) => void;\n/**\n * 参数 `headers`\n * - 有效范围：方法参数\n * - 合并 `BaseHeaders`\n */\nexport declare const Headers: (key?: string | undefined) => (target: BaseApi, propertyKey: string, index: number) => void;\n/**\n * Request Payload\n * - Supported body (like`POST`, `PUT`) as a body data, equivalent to `@Body`\n * - Not supported body (like `GET`, `DELETE` etc) as a `QueryString`\n */\nexport declare const Payload: (target: BaseApi, propertyKey: string, index: number) => void;\nexport declare type METHOD_TYPE = 'OPTIONS' | 'GET' | 'POST' | 'DELETE' | 'PUT' | 'HEAD' | 'PATCH' | 'JSONP' | 'FORM';\n/**\n * `OPTIONS` 请求\n * - 有效范围：方法\n */\nexport declare const OPTIONS: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `GET` 请求\n * - 有效范围：方法\n */\nexport declare const GET: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `POST` 请求\n * - 有效范围：方法\n */\nexport declare const POST: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `DELETE` 请求\n * - 有效范围：方法\n */\nexport declare const DELETE: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `PUT` 请求\n * - 有效范围：方法\n */\nexport declare const PUT: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `HEAD` 请求\n * - 有效范围：方法\n */\nexport declare const HEAD: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `PATCH` 请求\n * - 有效范围：方法\n */\nexport declare const PATCH: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `JSONP` 请求\n * - 有效范围：方法\n */\nexport declare const JSONP: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n/**\n * `FORM` 请求\n * - 有效范围：方法\n */\nexport declare const FORM: (url?: string, options?: HttpOptions | undefined) => (_target: BaseApi, targetKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => PropertyDescriptor | undefined;\n"]}