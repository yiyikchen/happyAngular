{"version":3,"file":"http.client.d.ts","sources":["http.client.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpClient, HttpContext, HttpEvent, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AlainConfigService } from '@delon/util/config';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\nexport declare type _HttpHeaders = HttpHeaders | {\n    [header: string]: string | string[];\n};\nexport declare type HttpObserve = 'body' | 'events' | 'response';\n/**\n * 封装HttpClient，主要解决：\n * + 优化HttpClient在参数上便利性\n * + 统一实现 loading\n * + 统一处理时间格式问题\n */\nexport declare class _HttpClient {\n    private http;\n    private cog;\n    constructor(http: HttpClient, cogSrv: AlainConfigService);\n    private lc;\n    /**\n     * Get whether it's loading\n     *\n     * 获取是否正在加载中\n     */\n    get loading(): boolean;\n    /**\n     * Get the currently loading count\n     *\n     * 获取当前加载中的数量\n     */\n    get loadingCount(): number;\n    parseParams(params: NzSafeAny): HttpParams;\n    appliedUrl(url: string, params?: NzSafeAny): string;\n    private setCount;\n    private push;\n    private pop;\n    /**\n     * Clean loading count\n     *\n     * 清空加载中\n     */\n    cleanLoading(): void;\n    /**\n     * **GET Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    get(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **GET Request** Return a `HttpEvent<T>` type / 返回一个 `HttpEvent<T>` 类型\n     */\n    get<T>(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * **GET Request** Return a `HttpResponse<any>` type / 返回一个 `HttpResponse<any>` 类型\n     */\n    get(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<any>>;\n    /**\n     * **GET Request** Return a `HttpResponse<T>` type / 返回一个 `HttpResponse<T>` 类型\n     */\n    get<T>(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * **GET Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    get(url: string, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * **GET Request** Return a generic type / 返回一个泛类型\n     */\n    get<T>(url: string, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe: 'body';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **POST Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    post(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **POST Request** Return a `HttpEvent<T>` type / 返回一个 `HttpEvent<T>` 类型\n     */\n    post<T>(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * **POST Request** Return a `HttpResponse<any>` type / 返回一个 `HttpResponse<any>` 类型\n     */\n    post(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<any>>;\n    /**\n     * **POST Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    post(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * **POST Request** Return a JSON type / 返回一个 `JSON` 类型\n     */\n    post<T>(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **DELETE Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    delete(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **DELETE Request** Return a `JSON` type / 返回一个 `JSON` 类型\n     */\n    delete(url: string, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<NzSafeAny>>;\n    /**\n     * **DELETE Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    delete(url: string, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * c返回一个泛类型\n     */\n    delete<T>(url: string, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **JSONP Request**\n     *\n     * @param callbackParam CALLBACK值，默认：JSONP_CALLBACK\n     */\n    jsonp(url: string, params?: any, callbackParam?: string): Observable<any>;\n    /**\n     * **PATCH Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    patch(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **PATCH Request** Return a `HttpResponse<JSON>` type / 返回一个 `HttpResponse<JSON>` 类型\n     */\n    patch(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<NzSafeAny>>;\n    /**\n     * **PATCH Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    patch(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * **PATCH Request** Return a `JSON` type / 返回一个 `JSON` 类型\n     */\n    patch<T>(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **PUT Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    put(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **PUT Request** Return a `HttpResponse<JSON>` type / 返回一个 `HttpResponse<JSON>` 类型\n     */\n    put(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<NzSafeAny>>;\n    /**\n     * **PUT Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    put(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * **PUT Request** Return a `JSON` type / 返回一个 `JSON` 类型\n     */\n    put<T>(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **Form Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    form(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **Form Request** Return a `HttpEvent<T>` type / 返回一个 `HttpEvent<T>` 类型\n     */\n    form<T>(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * **Form Request** Return a `HttpResponse<JSON>` type / 返回一个 `HttpResponse<JSON>` 类型\n     */\n    form(url: string, body: any, params: any, options: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<any>>;\n    /**\n     * **Form Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    form(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n    /**\n     * **Form Request** Return a `JSON` type / 返回一个 `JSON` 类型\n     */\n    form<T>(url: string, body?: any, params?: any, options?: {\n        headers?: _HttpHeaders;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<T>;\n    /**\n     * **Request** Return a `ArrayBuffer` type / 返回一个 `ArrayBuffer` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<ArrayBuffer>;\n    /**\n     * **Request** Return a `Blob` type / 返回一个 `Blob` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<Blob>;\n    /**\n     * **Request** Return a `string` type / 返回一个 `string` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: 'body';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<string>;\n    /**\n     * **Request** Return a `HttpEvent<ArrayBuffer>` type / 返回一个 `HttpEvent<ArrayBuffer>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * **Request** Return a `HttpEvent<Blob>` type / 返回一个 `HttpEvent<Blob>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * **Request** Return a `HttpEvent<string>` type / 返回一个 `HttpEvent<string>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * **Request** Return a `HttpEvent<any>` type / 返回一个 `HttpEvent<any>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        reportProgress?: boolean;\n        observe: 'events';\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * **Request** Return a `HttpEvent<R>` type / 返回一个 `HttpEvent<R>` 类型\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        reportProgress?: boolean;\n        observe: 'events';\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpEvent<R>>;\n    /**\n     * **Request** Return a `HttpResponse<ArrayBuffer>` type / 返回一个 `HttpResponse<ArrayBuffer>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * **Request** Return a `HttpResponse<Blob>` type / 返回一个 `HttpResponse<Blob>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * **Request** Return a `HttpResponse<string>` type / 返回一个 `HttpResponse<string>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe: 'response';\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * **Request** Return a `HttpResponse<Object>` type / 返回一个 `HttpResponse<Object>` 类型\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        reportProgress?: boolean;\n        observe: 'response';\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<NzSafeAny>>;\n    /**\n     * **Request** Return a `HttpResponse<R>` type / 返回一个 `HttpResponse<R>` 类型\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        reportProgress?: boolean;\n        observe: 'response';\n        responseType?: 'json';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<HttpResponse<R>>;\n    /**\n     * **Request** Return a `HttpResponse<Object>` type / 返回一个 `HttpResponse<Object>` 类型\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: 'body';\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<Record<string, unknown>>;\n    /**\n     * **Request** Return a `R` type / 返回一个 `R` 类型\n     */\n    request<R>(method: string, url: string, options?: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: 'body';\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<R>;\n    /**\n     * **Request** Return a `any` type / 返回一个 `any` 类型\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: _HttpHeaders;\n        params?: any;\n        observe?: HttpObserve;\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        context?: HttpContext;\n    }): Observable<any>;\n}\n"]}