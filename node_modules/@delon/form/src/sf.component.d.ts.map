{"version":3,"file":"sf.component.d.ts","sources":["sf.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, SimpleChanges } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ACLService } from '@delon/acl';\nimport { AlainI18NService, DelonLocaleService, LocaleData } from '@delon/theme';\nimport { AlainConfigService, AlainSFConfig } from '@delon/util/config';\nimport { BooleanInput } from '@delon/util/decorator';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { ErrorData } from './errors';\nimport { SFButton, SFLayout, SFValueChange } from './interface';\nimport { FormProperty } from './model/form.property';\nimport { FormPropertyFactory } from './model/form.property.factory';\nimport { SFSchema } from './schema/index';\nimport { SFUISchema } from './schema/ui';\nimport { TerminatorService } from './terminator.service';\nimport { SchemaValidatorFactory } from './validator.factory';\nexport declare function useFactory(schemaValidatorFactory: SchemaValidatorFactory, cogSrv: AlainConfigService): FormPropertyFactory;\nexport declare type SFMode = 'default' | 'search' | 'edit';\nexport declare class SFComponent implements OnInit, OnChanges, OnDestroy {\n    private formPropertyFactory;\n    private terminator;\n    private dom;\n    private cdr;\n    private localeSrv;\n    private aclSrv;\n    private i18nSrv;\n    private platform;\n    static ngAcceptInputType_liveValidate: BooleanInput;\n    static ngAcceptInputType_firstVisual: BooleanInput;\n    static ngAcceptInputType_onlyVisual: BooleanInput;\n    static ngAcceptInputType_compact: BooleanInput;\n    static ngAcceptInputType_loading: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_noColon: BooleanInput;\n    static ngAcceptInputType_cleanValue: BooleanInput;\n    private unsubscribe$;\n    private _renders;\n    private _item;\n    private _valid;\n    private _defUi;\n    readonly options: AlainSFConfig;\n    _inited: boolean;\n    locale: LocaleData;\n    rootProperty: FormProperty | null;\n    _formData: Record<string, unknown>;\n    _btn: SFButton;\n    _schema: SFSchema;\n    _ui: SFUISchema;\n    get btnGrid(): NzSafeAny;\n    /** 表单布局，等同 `nzLayout`，默认：horizontal */\n    layout: SFLayout;\n    /** JSON Schema */\n    schema: SFSchema;\n    /** UI Schema */\n    ui: SFUISchema;\n    /** 表单默认值 */\n    formData: Record<string, NzSafeAny>;\n    /**\n     * 按钮\n     * - 值为 `null` 或 `undefined` 表示手动添加按钮，但保留容器\n     * - 值为 `none` 表示手动添加按钮，且不保留容器\n     * - 使用 `spanLabelFixed` 固定标签宽度时，若无 `render.class` 则默认为居中状态\n     */\n    button?: SFButton | 'none' | null;\n    /**\n     * 是否实时校验，默认：`true`\n     * - `true` 每一次都校验\n     * - `false` 提交时校验\n     */\n    liveValidate: boolean;\n    /** 指定表单 `autocomplete` 值 */\n    autocomplete: 'on' | 'off';\n    /** 立即显示错误视觉 */\n    firstVisual: boolean;\n    /** 是否只展示错误视觉不显示错误文本 */\n    onlyVisual: boolean;\n    compact: boolean;\n    /** 表单模式 */\n    set mode(value: SFMode);\n    get mode(): SFMode;\n    private _mode;\n    /**\n     * Whether to load status，when `true` reset button is disabled status, submit button is loading status\n     */\n    loading: boolean;\n    disabled: boolean;\n    noColon: boolean;\n    cleanValue: boolean;\n    readonly formValueChange: EventEmitter<SFValueChange>;\n    readonly formChange: EventEmitter<Record<string, unknown>>;\n    readonly formSubmit: EventEmitter<Record<string, unknown>>;\n    readonly formReset: EventEmitter<Record<string, unknown>>;\n    readonly formError: EventEmitter<ErrorData[]>;\n    /**\n     * Whether the form is valid\n     *\n     * 表单是否有效\n     */\n    get valid(): boolean;\n    /**\n     * The value of the form\n     *\n     * 表单值\n     */\n    get value(): {\n        [key: string]: NzSafeAny;\n    };\n    /**\n     * Get form element property based on [path](https://ng-alain.com/form/qa#path)\n     *\n     * 根据[路径](https://ng-alain.com/form/qa#path)获取表单元素属性\n     */\n    getProperty(path: string): FormProperty | null;\n    /**\n     * Get element value based on [path](https://ng-alain.com/form/qa#path)\n     *\n     * 根据[路径](https://ng-alain.com/form/qa#path)获取表单元素值\n     */\n    getValue(path: string): NzSafeAny;\n    /**\n     * Set form element new value based on [path](https://ng-alain.com/form/qa#path)\n     *\n     * 根据[路径](https://ng-alain.com/form/qa#path)设置某个表单元素属性值\n     */\n    setValue(path: string, value: NzSafeAny): this;\n    onSubmit(e: Event): void;\n    constructor(formPropertyFactory: FormPropertyFactory, terminator: TerminatorService, dom: DomSanitizer, cdr: ChangeDetectorRef, localeSrv: DelonLocaleService, aclSrv: ACLService, i18nSrv: AlainI18NService, cogSrv: AlainConfigService, platform: Platform);\n    protected fanyi(key: string): string;\n    private inheritUI;\n    private coverProperty;\n    private coverButtonProperty;\n    ngOnInit(): void;\n    ngOnChanges(changes: {\n        [P in keyof this]?: SimpleChange;\n    } & SimpleChanges): void;\n    private attachCustomRender;\n    /**\n     * Validator the form is valid\n     *\n     * 校验表单是否有效\n     * - `emitError` 当表单无效时是否触发 `formError` 事件，默认：`true`\n     * - `onlyRoot` 只对根进行检验，不进行向下逐个递归，根已经包含整个 Json Schema，默认：`true`\n     */\n    validator(options?: {\n        emitError?: boolean;\n        onlyRoot?: boolean;\n    }): boolean;\n    /**\n     * Refresh the form Schema, when specifying `newSchema` means to replace the current Schema\n     *\n     * 刷新 Schema，当指定 `newSchema` 表示替换当前的 Schema\n     *\n     * 可以针对某个表单元素进行刷新，例如：\n     * ```\n     * // 获取某个元素\n     * const statusProperty = this.sf.getProperty('/status')!;\n     * // 重置 `schema` 或 `ui` 参数\n     * statusProperty.schema.enum = ['1', '2', '3'];\n     * // 调用 `reset` 重置初始值\n     * statusProperty.widget.reset('2');\n     * ```\n     */\n    refreshSchema(newSchema?: SFSchema, newUI?: SFUISchema): this;\n    /**\n     * Reset form\n     *\n     * 重置表单\n     *\n     * @param [emit] 是否触发 `formReset` 事件，默认：`false`\n     */\n    reset(emit?: boolean): this;\n    private cleanRootSub;\n    ngOnDestroy(): void;\n}\n"]}