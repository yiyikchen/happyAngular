{"version":3,"file":"widget.d.ts","sources":["widget.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Injector } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { LocaleData } from '@delon/theme';\nimport { NgClassType, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { SFValue } from './interface';\nimport { ArrayProperty } from './model/array.property';\nimport { FormProperty } from './model/form.property';\nimport { ObjectProperty } from './model/object.property';\nimport { SFSchema } from './schema';\nimport { SFOptionalHelp, SFUISchemaItem } from './schema/ui';\nimport { SFItemComponent } from './sf-item.component';\nimport { SFComponent } from './sf.component';\nimport { SFArrayWidgetSchema, SFObjectWidgetSchema } from './widgets';\nexport declare abstract class Widget<T extends FormProperty, UIT extends SFUISchemaItem> implements AfterViewInit {\n    readonly cd: ChangeDetectorRef;\n    readonly injector: Injector;\n    readonly sfItemComp?: SFItemComponent | undefined;\n    readonly sfComp?: SFComponent | undefined;\n    formProperty: T;\n    error: string;\n    showError: boolean;\n    id: string;\n    schema: SFSchema;\n    ui: UIT;\n    firstVisual: boolean;\n    get cls(): NgClassType;\n    get disabled(): boolean;\n    get l(): LocaleData;\n    get oh(): SFOptionalHelp;\n    get dom(): DomSanitizer;\n    get cleanValue(): boolean;\n    constructor(cd: ChangeDetectorRef, injector: Injector, sfItemComp?: SFItemComponent | undefined, sfComp?: SFComponent | undefined);\n    ngAfterViewInit(): void;\n    setValue(value: SFValue): void;\n    get value(): NzSafeAny;\n    detectChanges(onlySelf?: boolean): void;\n    abstract reset(value: SFValue): void;\n    abstract afterViewInit(): void;\n}\nexport declare class ControlWidget extends Widget<FormProperty, SFUISchemaItem> {\n    reset(_value: SFValue): void;\n    afterViewInit(): void;\n}\nexport declare class ControlUIWidget<UIT extends SFUISchemaItem> extends Widget<FormProperty, UIT> {\n    reset(_value: SFValue): void;\n    afterViewInit(): void;\n}\nexport declare class ArrayLayoutWidget extends Widget<ArrayProperty, SFArrayWidgetSchema> implements AfterViewInit {\n    reset(_value: SFValue): void;\n    afterViewInit(): void;\n    ngAfterViewInit(): void;\n}\nexport declare class ObjectLayoutWidget extends Widget<ObjectProperty, SFObjectWidgetSchema> implements AfterViewInit {\n    reset(_value: SFValue): void;\n    afterViewInit(): void;\n    ngAfterViewInit(): void;\n}\n"]}