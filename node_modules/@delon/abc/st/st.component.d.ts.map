{"version":3,"file":"st.component.d.ts","sources":["st.component.d.ts"],"names":[],"mappingssourcesContent":["import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChange, SimpleChanges, TemplateRef, TrackByFunction } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AlainI18NService, DelonLocaleService, DrawerHelper, LocaleData, ModalHelper } from '@delon/theme';\nimport { AlainConfigService } from '@delon/util/config';\nimport { BooleanInput, NumberInput } from '@delon/util/decorator';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzContextMenuService, NzDropdownMenuComponent } from 'ng-zorro-antd/dropdown';\nimport { NzResizeEvent } from 'ng-zorro-antd/resizable';\nimport { NzTableComponent } from 'ng-zorro-antd/table';\nimport { STColumnSource } from './st-column-source';\nimport { STDataSource } from './st-data-source';\nimport { STExport } from './st-export';\nimport { STChange, STClickRowClassName, STColumn, STColumnButton, STColumnFilterMenu, STColumnSelection, STContextmenuFn, STContextmenuItem, STCustomRequestOptions, STData, STError, STExportOptions, STLoadOptions, STPage, STReq, STRes, STResetColumnsOption, STResizable, STRowClassName, STSingleSort, STStatisticalResults, STWidthMode } from './st.interfaces';\nimport { _STColumn, _STHeader } from './st.types';\nexport declare class STComponent implements AfterViewInit, OnChanges, OnDestroy {\n    private cdr;\n    private router;\n    private el;\n    private exportSrv;\n    private modalHelper;\n    private drawerHelper;\n    private doc;\n    private columnSource;\n    private dataSource;\n    private delonI18n;\n    private cms;\n    static ngAcceptInputType_ps: NumberInput;\n    static ngAcceptInputType_pi: NumberInput;\n    static ngAcceptInputType_total: NumberInput;\n    static ngAcceptInputType_loadingDelay: NumberInput;\n    static ngAcceptInputType_bordered: BooleanInput;\n    static ngAcceptInputType_expandRowByClick: BooleanInput;\n    static ngAcceptInputType_expandAccordion: BooleanInput;\n    static ngAcceptInputType_rowClickTime: NumberInput;\n    static ngAcceptInputType_responsive: BooleanInput;\n    static ngAcceptInputType_responsiveHideHeaderFooter: BooleanInput;\n    static ngAcceptInputType_virtualScroll: BooleanInput;\n    static ngAcceptInputType_virtualItemSize: NumberInput;\n    static ngAcceptInputType_virtualMaxBufferPx: NumberInput;\n    static ngAcceptInputType_virtualMinBufferPx: NumberInput;\n    private destroy$;\n    private data$;\n    private totalTpl;\n    private cog;\n    private rowClickCount;\n    private _req;\n    private _res;\n    private _page;\n    private _widthMode;\n    private customWidthConfig;\n    _widthConfig: string[];\n    locale: LocaleData;\n    _loading: boolean;\n    _data: STData[];\n    _statistical: STStatisticalResults;\n    _isPagination: boolean;\n    _allChecked: boolean;\n    _allCheckedDisabled: boolean;\n    _indeterminate: boolean;\n    _headers: _STHeader[][];\n    _columns: _STColumn[];\n    contextmenuList: STContextmenuItem[];\n    readonly orgTable: NzTableComponent<STData>;\n    readonly contextmenuTpl: NzDropdownMenuComponent;\n    get req(): STReq;\n    set req(value: STReq);\n    /** 返回体配置 */\n    get res(): STRes;\n    set res(value: STRes);\n    get page(): STPage;\n    set page(value: STPage);\n    data: string | STData[] | Observable<STData[]>;\n    columns: STColumn[];\n    contextmenu?: STContextmenuFn;\n    ps: number;\n    pi: number;\n    total: number;\n    loading: boolean | null;\n    loadingDelay: number;\n    loadingIndicator: TemplateRef<void>;\n    bordered: boolean;\n    size: 'small' | 'middle' | 'default';\n    scroll: {\n        y?: string;\n        x?: string;\n    };\n    singleSort: STSingleSort;\n    private _multiSort?;\n    get multiSort(): NzSafeAny;\n    set multiSort(value: NzSafeAny);\n    rowClassName: STRowClassName;\n    clickRowClassName?: STClickRowClassName | null;\n    set widthMode(value: STWidthMode);\n    get widthMode(): STWidthMode;\n    set widthConfig(val: string[]);\n    private _resizable;\n    set resizable(val: STResizable | boolean | string);\n    header?: string | TemplateRef<void> | null;\n    showHeader: boolean;\n    footer?: string | TemplateRef<void> | null;\n    bodyHeader?: TemplateRef<STStatisticalResults> | null;\n    body?: TemplateRef<STStatisticalResults> | null;\n    expandRowByClick: boolean;\n    expandAccordion: boolean;\n    expand: TemplateRef<{\n        $implicit: NzSafeAny;\n        column: STColumn;\n    }>;\n    noResult?: string | TemplateRef<void> | null;\n    rowClickTime: number;\n    responsive: boolean;\n    responsiveHideHeaderFooter: boolean;\n    readonly error: EventEmitter<STError>;\n    readonly change: EventEmitter<STChange<any>>;\n    virtualScroll: boolean;\n    virtualItemSize: number;\n    virtualMaxBufferPx: number;\n    virtualMinBufferPx: number;\n    customRequest?: (options: STCustomRequestOptions) => Observable<NzSafeAny>;\n    virtualForTrackBy: TrackByFunction<STData>;\n    /**\n     * Get the number of the current page\n     */\n    get count(): number;\n    /**\n     * Get the data of the current page\n     */\n    get list(): STData[];\n    private get routerState();\n    constructor(i18nSrv: AlainI18NService, cdr: ChangeDetectorRef, router: Router, el: ElementRef, exportSrv: STExport, modalHelper: ModalHelper, drawerHelper: DrawerHelper, doc: NzSafeAny, columnSource: STColumnSource, dataSource: STDataSource, delonI18n: DelonLocaleService, configSrv: AlainConfigService, cms: NzContextMenuService);\n    private setCog;\n    cd(): this;\n    renderTotal(total: string, range: string[]): string;\n    private changeEmit;\n    /**\n     * 获取过滤后所有数据\n     * - 本地数据：包含排序、过滤后不分页数据\n     * - 远程数据：不传递 `pi`、`ps` 两个参数\n     */\n    get filteredData(): Promise<STData[]>;\n    private updateTotalTpl;\n    private setLoading;\n    private loadData;\n    private loadPageData;\n    /** 清空所有数据 */\n    clear(cleanStatus?: boolean): this;\n    /** 清空所有状态 */\n    clearStatus(): this;\n    /**\n     * 根据页码重新加载数据\n     *\n     * @param pi 指定当前页码，默认：`1`\n     * @param extraParams 重新指定 `extraParams` 值\n     * @param options 选项\n     */\n    load(pi?: number, extraParams?: NzSafeAny, options?: STLoadOptions): this;\n    /**\n     * 重新刷新当前页\n     *\n     * @param extraParams 重新指定 `extraParams` 值\n     */\n    reload(extraParams?: NzSafeAny, options?: STLoadOptions): this;\n    /**\n     * 重置且重新设置 `pi` 为 `1`，包含以下值：\n     * - `check` 数据\n     * - `radio` 数据\n     * - `sort` 数据\n     * - `fileter` 数据\n     *\n     * @param extraParams 重新指定 `extraParams` 值\n     */\n    reset(extraParams?: NzSafeAny, options?: STLoadOptions): this;\n    private _toTop;\n    _change(type: 'pi' | 'ps', options?: STLoadOptions): void;\n    _click(e: Event, item: STData, col: STColumn): boolean;\n    private closeOtherExpand;\n    _rowClick(e: Event, item: STData, index: number): void;\n    private _clickRowClassName;\n    _expandChange(item: STData, expand: boolean): void;\n    _stopPropagation(ev: Event): void;\n    /**\n     * Remove a row in the table, like this:\n     *\n     * ```\n     * this.st.removeRow(0)\n     * this.st.removeRow(stDataItem)\n     * ```\n     */\n    removeRow(data: STData | STData[] | number): this;\n    /**\n     * Sets the row value for the `index` in the table, like this:\n     *\n     * - `optinos.refreshSchema` Whether to refresh of st schemas\n     * - `optinos.emitReload` Whether to trigger a reload http request when data is url\n     *\n     * ```\n     * this.st.setRow(0, { price: 100 })\n     * this.st.setRow(0, { price: 100, name: 'asdf' })\n     * this.st.setRow(item, { price: 100 })\n     * ```\n     */\n    setRow(index: number | STData, item: STData, options?: {\n        refreshSchema?: boolean;\n        emitReload?: boolean;\n    }): this;\n    sort(col: _STColumn, idx: number, value: NzSafeAny): void;\n    clearSort(): this;\n    private handleFilter;\n    _filterConfirm(col: _STColumn): void;\n    _filterRadio(col: _STColumn, item: STColumnFilterMenu, checked: boolean): void;\n    _filterClear(col: _STColumn): void;\n    clearFilter(): this;\n    _filterClick($event: MouseEvent): void;\n    /** 清除所有 `checkbox` */\n    clearCheck(): this;\n    private _refCheck;\n    _checkAll(checked?: boolean): this;\n    _checkSelection(i: STData, value: boolean): this;\n    _rowSelection(row: STColumnSelection): this;\n    _checkNotify(): this;\n    /** 清除所有 `radio` */\n    clearRadio(): this;\n    _refRadio(checked: boolean, item: STData): this;\n    _btnClick(record: STData, btn: STColumnButton, ev?: Event): void;\n    private btnCallback;\n    /**\n     * 导出当前页，确保已经注册 `XlsxModule`\n     *\n     * @param newData 重新指定数据；若为 `true` 表示使用 `filteredData` 数据\n     * @param opt 额外参数\n     */\n    export(newData?: STData[] | true, opt?: STExportOptions): void;\n    colResize({ width }: NzResizeEvent, column: _STColumn): void;\n    onContextmenu(event: MouseEvent): void;\n    get cdkVirtualScrollViewport(): CdkVirtualScrollViewport;\n    resetColumns(options?: STResetColumnsOption): Promise<this>;\n    private refreshColumns;\n    private optimizeData;\n    /**\n     * Return pure data, `st` internally maintains a set of data for caching, this part of data may affect the backend\n     *\n     * 返回纯净数据，`st` 内部会维护一组用于缓存的数据，这部分数据可能会影响后端\n     */\n    pureItem(itemOrIndex: STData | number): STData | null;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: {\n        [P in keyof this]?: SimpleChange;\n    } & SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}