import { Direction, Directionality } from '@angular/cdk/bidi';
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, OnChanges, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { Router } from '@angular/router';
import { ReuseTabService } from '@delon/abc/reuse-tab';
import { AlainI18NService, MenuService, SettingsService, TitleService } from '@delon/theme';
import { AlainConfigService } from '@delon/util/config';
import { BooleanInput, NumberInput } from '@delon/util/decorator';
import type { NzSafeAny } from 'ng-zorro-antd/core/types';
import * as ɵngcc0 from '@angular/core';
interface PageHeaderPath {
    title?: string;
    link?: string[];
}
export declare class PageHeaderComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private renderer;
    private router;
    private menuSrv;
    private i18nSrv;
    private titleSrv;
    private reuseSrv;
    private cdr;
    private directionality;
    static ngAcceptInputType_loading: BooleanInput;
    static ngAcceptInputType_wide: BooleanInput;
    static ngAcceptInputType_autoBreadcrumb: BooleanInput;
    static ngAcceptInputType_autoTitle: BooleanInput;
    static ngAcceptInputType_syncTitle: BooleanInput;
    static ngAcceptInputType_fixed: BooleanInput;
    static ngAcceptInputType_fixedOffsetTop: NumberInput;
    static ngAcceptInputType_recursiveBreadcrumb: BooleanInput;
    private destroy$;
    private conTpl;
    private affix;
    inited: boolean;
    isBrowser: boolean;
    dir: Direction;
    private get menus();
    _titleVal: string | null;
    paths: PageHeaderPath[];
    _title: string | null;
    _titleTpl: TemplateRef<NzSafeAny>;
    set title(value: string | TemplateRef<void> | null);
    loading: boolean;
    wide: boolean;
    home?: string;
    homeLink?: string;
    homeI18n?: string;
    autoBreadcrumb: boolean;
    autoTitle: boolean;
    syncTitle: boolean;
    fixed: boolean;
    fixedOffsetTop: number;
    breadcrumb?: TemplateRef<NzSafeAny> | null;
    recursiveBreadcrumb: boolean;
    logo?: TemplateRef<void> | null;
    action?: TemplateRef<void> | null;
    content?: TemplateRef<void> | null;
    extra?: TemplateRef<void> | null;
    tab?: TemplateRef<void> | null;
    constructor(settings: SettingsService, renderer: Renderer2, router: Router, menuSrv: MenuService, i18nSrv: AlainI18NService, titleSrv: TitleService, reuseSrv: ReuseTabService, cdr: ChangeDetectorRef, configSrv: AlainConfigService, platform: Platform, directionality: Directionality);
    refresh(): void;
    private genBreadcrumb;
    private setTitle;
    checkContent(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PageHeaderComponent, [null, null, null, null, { optional: true; }, { optional: true; }, { optional: true; }, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<PageHeaderComponent, "page-header", ["pageHeader"], { "loading": "loading"; "wide": "wide"; "breadcrumb": "breadcrumb"; "logo": "logo"; "action": "action"; "content": "content"; "extra": "extra"; "tab": "tab"; "title": "title"; "home": "home"; "homeLink": "homeLink"; "homeI18n": "homeI18n"; "autoBreadcrumb": "autoBreadcrumb"; "autoTitle": "autoTitle"; "syncTitle": "syncTitle"; "fixed": "fixed"; "fixedOffsetTop": "fixedOffsetTop"; "recursiveBreadcrumb": "recursiveBreadcrumb"; }, {}, never, ["*"]>;
}
export {};

//# sourceMappingURL=page-header.component.d.ts.map