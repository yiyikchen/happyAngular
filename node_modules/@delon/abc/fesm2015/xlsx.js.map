{"version":3,"file":"xlsx.js","sources":["../../../../packages/abc/xlsx/xlsx.service.ts","../../../../packages/abc/xlsx/xlsx.directive.ts","../../../../packages/abc/xlsx/xlsx.module.ts","../../../../packages/abc/xlsx/xlsx.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\n\nimport { saveAs } from 'file-saver';\nimport isUtf8 from 'isutf8';\n\nimport { AlainConfigService, AlainXlsxConfig } from '@delon/util/config';\nimport { ZoneOutside } from '@delon/util/decorator';\nimport { LazyResult, LazyService } from '@delon/util/other';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { XlsxExportOptions, XlsxExportResult, XlsxExportSheet } from './xlsx.types';\n\ndeclare var XLSX: NzSafeAny;\ndeclare var cptable: NzSafeAny;\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxService {\n  constructor(\n    private http: HttpClient,\n    private lazy: LazyService,\n    configSrv: AlainConfigService,\n    private ngZone: NgZone\n  ) {\n    this.cog = configSrv.merge('xlsx', {\n      url: 'https://cdn.bootcdn.net/ajax/libs/xlsx/0.16.8/xlsx.full.min.js',\n      modules: [`https://cdn.bootcdn.net/ajax/libs/xlsx/0.16.8/cpexcel.min.js`]\n    })!;\n  }\n  private cog: AlainXlsxConfig;\n\n  private init(): Promise<LazyResult[]> {\n    return typeof XLSX !== 'undefined'\n      ? Promise.resolve([])\n      : this.lazy.load([this.cog.url!].concat(this.cog.modules!));\n  }\n\n  @ZoneOutside()\n  private read(data: NzSafeAny, options: { type: 'array' | 'binary' | 'string' }): { [key: string]: NzSafeAny[][] } {\n    const ret: NzSafeAny = {};\n    if (options.type === 'binary') {\n      const buf = new Uint8Array(data);\n      if (!isUtf8(buf)) {\n        try {\n          data = cptable.utils.decode(936, buf);\n          options.type = 'string';\n        } catch {\n          options.type = 'array';\n        }\n      }\n    }\n    const wb = XLSX.read(data, options);\n    wb.SheetNames.forEach((name: string) => {\n      const sheet: NzSafeAny = wb.Sheets[name];\n      ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n    });\n    return ret;\n  }\n\n  /**\n   * 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式\n   */\n  import(fileOrUrl: File | string): Promise<{ [key: string]: NzSafeAny[][] }> {\n    return new Promise<{ [key: string]: NzSafeAny[][] }>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n              (res: ArrayBuffer) => {\n                this.ngZone.run(() => resolve(this.read(new Uint8Array(res), { type: 'array' })));\n              },\n              (err: NzSafeAny) => {\n                reject(err);\n              }\n            );\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: NzSafeAny) => {\n            this.ngZone.run(() => resolve(this.read(e.target.result, { type: 'binary' })));\n          };\n          reader.readAsArrayBuffer(fileOrUrl);\n        })\n        .catch(() => reject(`Unable to load xlsx.js`));\n    });\n  }\n\n  @ZoneOutside()\n  async export(options: XlsxExportOptions): Promise<XlsxExportResult> {\n    return new Promise<XlsxExportResult>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          const wb: NzSafeAny = XLSX.utils.book_new();\n          if (Array.isArray(options.sheets)) {\n            (options.sheets as XlsxExportSheet[]).forEach((value: XlsxExportSheet, index: number) => {\n              const ws: NzSafeAny = XLSX.utils.aoa_to_sheet(value.data);\n              XLSX.utils.book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);\n            });\n          } else {\n            wb.SheetNames = Object.keys(options.sheets);\n            wb.Sheets = options.sheets;\n          }\n\n          if (options.callback) options.callback(wb);\n\n          const wbout: ArrayBuffer = XLSX.write(wb, {\n            bookType: 'xlsx',\n            bookSST: false,\n            type: 'array',\n            ...options.opts\n          });\n          const filename = options.filename || 'export.xlsx';\n          saveAs(new Blob([wbout], { type: 'application/octet-stream' }), filename);\n\n          resolve({ filename, wb });\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * 数据转符号名\n   * - `1` => `A`\n   * - `27` => `AA`\n   * - `703` => `AAA`\n   */\n  numberToSchema(val: number): string {\n    const startCode = 'A'.charCodeAt(0);\n    let res = '';\n\n    do {\n      --val;\n      res = String.fromCharCode(startCode + (val % 26)) + res;\n      val = (val / 26) >> 0;\n    } while (val > 0);\n\n    return res;\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { XlsxService } from './xlsx.service';\nimport { XlsxExportOptions } from './xlsx.types';\n\n@Directive({\n  selector: '[xlsx]',\n  exportAs: 'xlsx',\n  host: {\n    '(click)': '_click()'\n  }\n})\nexport class XlsxDirective {\n  @Input('xlsx') data: XlsxExportOptions;\n\n  constructor(private srv: XlsxService) {}\n\n  _click(): void {\n    this.srv.export(this.data);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { XlsxDirective } from './xlsx.directive';\n\nconst COMPONENTS = [XlsxDirective];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: COMPONENTS,\n  exports: COMPONENTS\n})\nexport class XlsxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}